"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[4132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),m=s,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:s,o[1]=r;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5335:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(7462),s=(n(7294),n(3905));const i={toc:[]};function o(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{title:"Deprecated: Vert.x-based Telestion",type:"warning"},(0,s.kt)("p",{parentName:"admonition"},"Please note that the application and development of backend services using\nVert.x in Telestion are deprecated. In the future, Telestion backend services\nwill be developed using TypeScript and Deno, or through custom integrations with\nother languages."),(0,s.kt)("p",{parentName:"admonition"},"While there may be a compatibility layer for Vert.x services in the future, its\navailability is not guaranteed."),(0,s.kt)("p",{parentName:"admonition"},"For developing backend services, please refer to the (Work-in-Progress)\ndocumentation available here:\n",(0,s.kt)("a",{parentName:"p",href:"https://pklaschka.github.io/telestion-docs-new/"},"https://pklaschka.github.io/telestion-docs-new/"),".\nOnce the documentation is complete, it will be moved to the main Telestion\ndocumentation."),(0,s.kt)("p",{parentName:"admonition"},"Additional Information:"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"NATS will be used as the distributed message bus/message broker for Telestion."),(0,s.kt)("li",{parentName:"ul"},"NATS' integrated authentication and authorization features will handle\nauthentication and authorization for Ground Station operators, providing a\nsingle source of truth."),(0,s.kt)("li",{parentName:"ul"},"The event bus bridge will no longer be featured, and clients will be directly\nconnected to the NATS server.")),(0,s.kt)("p",{parentName:"admonition"},"To establish a more technology-independent terminology, the Telestion project\nwill modify the naming conventions as follows:"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"The NATS server will be referred to as the message broker, message bus, or\nNATS server interchangeably."),(0,s.kt)("li",{parentName:"ul"},"Components that act as services without an attached user interface, will be\nreferred to as services or backend services collectively."),(0,s.kt)("li",{parentName:"ul"},'Components that provide a user interface, formerly known as "clients," will be\nreferred to as frontends. In most cases, the frontend will authenticate to the\nmessage broker as the user, while backend services will act on their own\nbehalf.')),(0,s.kt)("p",{parentName:"admonition"},'These changes aim to provide clearer and more consistent terminology, accounting\nfor the possibility of components having both service and frontend\nfunctionalities. Additionally, the use of "client" for frontends will be\nreplaced to avoid potential confusion.'),(0,s.kt)("p",{parentName:"admonition"},"We recommend using the NATS client libraries recommended by NATS itself, unless\nthere are no suitable options available for the targeted language/environment.\nWe will not develop our own client libraries unless there is a lack of suitable\noptions or significant advantages justify the effort."),(0,s.kt)("p",{parentName:"admonition"},"While Deno/TypeScript is the recommended choice for backend services, its use is\nnot mandatory. Developers will be encouraged to use Deno/TypeScript where\nappropriate, but other options will still be supported for specific services.\nComprehensive documentation and resources will be provided for writing and\ndeploying Deno-based backend services in TypeScript."),(0,s.kt)("p",{parentName:"admonition"},"Please consider these changes and updates as you continue with Telestion\ndevelopment.")))}o.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>l,rj:()=>s,Ee:()=>d,s3:()=>o});var a=n(7294);function s(e){let{cols:t=2,children:n}=e;return a.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var i=n(9960);function o(e){let{children:t,to:n}=e;return a.createElement(i.Z,{to:n,className:"block-link"},a.createElement("span",null,t," \xbb"),a.createElement("span",null,n))}const r=()=>a.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},a.createElement("defs",null,a.createElement("style",null,".a{clip-path:url(#b);}"),a.createElement("clipPath",{id:"b"},a.createElement("rect",{width:24,height:24}))),a.createElement("g",{id:"a",className:"a"},a.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function l(e){let{children:t,file:n}=e;return a.createElement("a",{className:"block-link",download:!0,href:n},a.createElement("span",null,a.createElement(r,null)," ",t))}var p=n(7462),c=n(4996),u=n(6010);function d(e){let{src:t,invertible:n=!1,center:s=!1,alt:o="",...r}=e;const l=t.startsWith("/static")?t.substr(7):t,d=(0,c.Z)(l);return a.createElement(a.Fragment,null,a.createElement(i.Z,{to:l,style:{display:"none"}},"Link to ",o),a.createElement("img",(0,p.Z)({src:d,className:(0,u.Z)(n&&"invertible",s&&"center"),alt:o},r)))}n(5335)},6110:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),s=(n(7294),n(3905)),i=n(4966);const o={title:"Using JsonMessage for event bus messages",description:"Learn how to use Telestion's JsonMessage APIs to get type safety in your event bus messages."},r=void 0,l={unversionedId:"application/tutorials/using-jsonmessage",id:"application/tutorials/using-jsonmessage",title:"Using JsonMessage for event bus messages",description:"Learn how to use Telestion's JsonMessage APIs to get type safety in your event bus messages.",source:"@site/docs/application/tutorials/201-using-jsonmessage.mdx",sourceDirName:"application/tutorials",slug:"/application/tutorials/using-jsonmessage",permalink:"/application/tutorials/using-jsonmessage",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/application/tutorials/201-using-jsonmessage.mdx",tags:[],version:"current",sidebarPosition:201,frontMatter:{title:"Using JsonMessage for event bus messages",description:"Learn how to use Telestion's JsonMessage APIs to get type safety in your event bus messages."},sidebar:"application",previous:{title:"Writing a Verticle",permalink:"/application/tutorials/writing-a-verticle"},next:{title:"Adding configuration options",permalink:"/application/tutorials/adding-configuration-options"}},p={},c=[{value:"What you&#39;ll build",id:"what-youll-build",level:2},{value:"Step 1: Creating the <code>record</code>",id:"step-1-creating-the-record",level:2},{value:"Step 2: Listening for messages of that class",id:"step-2-listening-for-messages-of-that-class",level:2},{value:"Step 3: Publishing messages",id:"step-3-publishing-messages",level:2},{value:"Next steps",id:"next-steps",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In this tutorial, you'll extend your basic Verticle by using the ",(0,s.kt)("inlineCode",{parentName:"p"},"JsonMessage"),"\nAPIs from the ",(0,s.kt)("inlineCode",{parentName:"p"},"telestion-core")," packages to get some type safety in event bus\nmessages."),(0,s.kt)("admonition",{title:"Prerequisites",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"To complete this tutorial, you should be familiar with Records in Java and how\nto write basic Verticles.")),(0,s.kt)("h2",{id:"what-youll-build"},"What you'll build"),(0,s.kt)("p",null,"You'll extend the code from\n",(0,s.kt)("a",{parentName:"p",href:"/application/tutorials/writing-a-verticle"},"Writing a Verticle")," with the\n",(0,s.kt)("inlineCode",{parentName:"p"},"JsonMessage")," APIs. This stops you from having to guess about the kind of\nmessage sent and poses much fewer edge cases you may need to handle."),(0,s.kt)("p",null,"It's also highly compatible with various event bus bridges, for example allowing\nto exchange these messages with web clients."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"When not to use ",(0,s.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"JsonMessage")),(0,s.kt)("p",{parentName:"admonition"},'It sometimes makes sense to drop type safety and instead handle "raw" JSON. In\nthese cases, you should use the raw Jackson JSON APIs (like ',(0,s.kt)("inlineCode",{parentName:"p"},"JsonObject"),") and\nsend serialized forms via the event bus (to ensure compatibility with event bus\nbridges)."),(0,s.kt)("p",{parentName:"admonition"},"One case where this might make sense is when you handle arbitrary input data\nthat doesn't necessarily have fixed types.")),(0,s.kt)(i.s3,{to:"/application/tutorials/writing-a-verticle/",mdxType:"Reference"},"Writing a Verticle (Base Code)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='IntegerMessage.java'",title:"'IntegerMessage.java'"},"package de.wuespace.telestion.project.example;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport de.wuespace.telestion.api.message.JsonMessage;\n\nrecord IntegerMessage(\n        @JsonProperty int value\n) implements JsonMessage {}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {12,21-25}",title:"'MessageTransformer.java'","{12,21-25}":!0},'package de.wuespace.telestion.project.example;\n\nimport de.wuespace.telestion.api.verticle.NoConfiguration;\nimport de.wuespace.telestion.api.verticle.TelestionVerticle;\n\npublic class MessageTransformer extends TelestionVerticle<NoConfiguration> {\n    public static void main(String[] args) throws InterruptedException {\n        // [...]\n\n        vertx.deployVerticle(new MessageTransformer()).onSuccess(res -> {\n            // publish a number once the Verticle is deployed\n            vertx.eventBus().publish("input", new IntegerMessage(3).json());\n        });\n    }\n\n    @Override\n    public void onStart() {\n        var eb = getVertx().eventBus();\n\n        eb.consumer("input", event -> {\n            JsonMessage.on(IntegerMessage.class, event, message -> {\n                int received = message.value();\n                var output = new IntegerMessage(received * 2);\n                eb.publish("output", output.json());\n            });\n        });\n    }\n}\n')),(0,s.kt)("h2",{id:"step-1-creating-the-record"},"Step 1: Creating the ",(0,s.kt)("inlineCode",{parentName:"h2"},"record")),(0,s.kt)("p",null,"The first thing you need to do is to create the ",(0,s.kt)("em",{parentName:"p"},"message container"),", a ",(0,s.kt)("inlineCode",{parentName:"p"},"record"),"\nthat contains your message data."),(0,s.kt)("p",null,'In this case, you\'ll just expand upon your "integer processor" and create a\nrecord that holds one integer value.'),(0,s.kt)("p",null,"Create a file ",(0,s.kt)("inlineCode",{parentName:"p"},"IntegerMessage.java")," in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"de.wuespace.telestion.project.example")," package and add the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='IntegerMessage.java'",title:"'IntegerMessage.java'"},"package de.wuespace.telestion.project.example;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport de.wuespace.telestion.api.message.JsonMessage;\n\nrecord IntegerMessage(\n        @JsonProperty int value\n) implements JsonMessage {}\n")),(0,s.kt)("p",null,"The two ",(0,s.kt)("em",{parentName:"p"},"special ingredients")," to make this a ",(0,s.kt)("inlineCode",{parentName:"p"},"JsonMessage")," are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"declaring that it implements the\n",(0,s.kt)("inlineCode",{parentName:"li"},"de.wuespace.telestion.api.message.JsonMessage")," interface"),(0,s.kt)("li",{parentName:"ul"},"marking its attribute(/-s) as JSON properties using the ",(0,s.kt)("inlineCode",{parentName:"li"},"@JsonProperty"),"\ndecorator")),(0,s.kt)("p",null,"Now, you can begin using you ",(0,s.kt)("inlineCode",{parentName:"p"},"IntegerMessage")," with the Telestion APIs."),(0,s.kt)("h2",{id:"step-2-listening-for-messages-of-that-class"},"Step 2: Listening for messages of that class"),(0,s.kt)("p",null,"Since you now have a proper ",(0,s.kt)("inlineCode",{parentName:"p"},"JsonMessage"),' wrapper, you can drop the previous\n"casting to ',(0,s.kt)("inlineCode",{parentName:"p"},"int"),'" from the raw ',(0,s.kt)("inlineCode",{parentName:"p"},"Object message.body()")," in your consumer and\ncan, instead, use one of Telestion's convenience functions for filtering for\nvalid messages."),(0,s.kt)("p",null,"Replace your previous ",(0,s.kt)("inlineCode",{parentName:"p"},"eb.consumer()")," logic in ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageTransformer::onStart()"),"\nwith this code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {13-16}",title:"'MessageTransformer.java'","{13-16}":!0},'package de.wuespace.telestion.project.example;\n\n// [...]\n\npublic class MessageTransformer extends TelestionVerticle<NoConfiguration> {\n    // [...]\n\n    @Override\n    public void onStart() {\n        // TODO: use vertx instead of getVertx\n        var eb = getVertx().eventBus();\n\n        eb.consumer("input", event -> {\n            JsonMessage.on(IntegerMessage.class, event, message -> {\n                int received = message.value();\n                eb.publish("output", received * 2);\n            });\n        });\n    }\n}\n')),(0,s.kt)("p",null,"Instead of handling the ",(0,s.kt)("inlineCode",{parentName:"p"},"event")," directly, you pass it into the\n",(0,s.kt)("inlineCode",{parentName:"p"},"JsonMessage.on()")," function. This then filters messages and calls a handler\npassed into it if and only if the message type matches the specified class\n(here: ",(0,s.kt)("inlineCode",{parentName:"p"},"IntegerMessage"),")."),(0,s.kt)("p",null,"The first argument to the handler, ",(0,s.kt)("inlineCode",{parentName:"p"},"message"),", then is the already deserialized\ninstance of ",(0,s.kt)("inlineCode",{parentName:"p"},"IntegerMessage")," and you can, thus, use it to further process the\ndata."),(0,s.kt)("p",null,"In this case, you use ",(0,s.kt)("inlineCode",{parentName:"p"},"message.value()")," to retrieve the ",(0,s.kt)("inlineCode",{parentName:"p"},"value")," field within the\nrecord. Since you already know that it's of the type ",(0,s.kt)("inlineCode",{parentName:"p"},"IntegerMessage")," where\n",(0,s.kt)("inlineCode",{parentName:"p"},"value")," is an integer, you no longer need to cast any types or handle other edge\ncases."),(0,s.kt)("h2",{id:"step-3-publishing-messages"},"Step 3: Publishing messages"),(0,s.kt)("p",null,"Now that you can receive ",(0,s.kt)("inlineCode",{parentName:"p"},"IntegerMessage")," messages, you also need to publish\nthem."),(0,s.kt)("p",null,"Create a new ",(0,s.kt)("inlineCode",{parentName:"p"},"IntegerMessage")," instance called ",(0,s.kt)("inlineCode",{parentName:"p"},"output")," and instead of publishing\n",(0,s.kt)("inlineCode",{parentName:"p"},"received * 2"),", publish ",(0,s.kt)("inlineCode",{parentName:"p"},"output.json()"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {13-14}",title:"'MessageTransformer.java'","{13-14}":!0},'// [...]\n\npublic class MessageTransformer extends TelestionVerticle<NoConfiguration> {\n    // [...]\n\n    @Override\n    public void onStart() {\n        var eb = getVertx().eventBus();\n\n        eb.consumer("input", event -> {\n            JsonMessage.on(IntegerMessage.class, event, message -> {\n                int received = message.value();\n                var output = new IntegerMessage(received * 2);\n                eb.publish("output", output.json());\n            });\n        });\n    }\n}\n')),(0,s.kt)("admonition",{type:"warning"},(0,s.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Calling ",(0,s.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},".json()")),(0,s.kt)("p",{parentName:"admonition"},"To use the ",(0,s.kt)("inlineCode",{parentName:"p"},"JsonMessage")," APIs when publishing a message, you must publish the\nresult of calling ",(0,s.kt)("inlineCode",{parentName:"p"},".json()")," on your ",(0,s.kt)("inlineCode",{parentName:"p"},"JsonMessage"),". This converts its contents to\na JSON ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," that can get parsed on the receiving end.")),(0,s.kt)("p",null,"Now, all you need to do to test your code is to also publish an ",(0,s.kt)("inlineCode",{parentName:"p"},"IntegerMessage"),"\nin the ",(0,s.kt)("inlineCode",{parentName:"p"},"main()")," method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {7}",title:"'MessageTransformer.java'","{7}":!0},'// [...]\n\npublic class MessageTransformer extends TelestionVerticle<NoConfiguration> {\n    public static void main(String[] args) throws InterruptedException {\n        // [...]\n\n        vertx.deployVerticle(new MessageTransformer()).onSuccess(res -> {\n                // publish a number once the Verticle is deployed\n                vertx.eventBus().publish("input", new IntegerMessage(3).json());\n        });\n    }\n\n    // [...]\n}\n')),(0,s.kt)("p",null,"When you now re-run your ",(0,s.kt)("inlineCode",{parentName:"p"},"main()")," method, you should get the following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-txt"},'Output: {"value":6,"className":"de.wuespace.telestion.project.example.IntegerMessage"}\n')),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"className")," attribute"),(0,s.kt)("p",{parentName:"admonition"},"As you can see, ",(0,s.kt)("inlineCode",{parentName:"p"},"JsonMessage")," instances automatically encode a ",(0,s.kt)("inlineCode",{parentName:"p"},"className"),"\nattribute into the encoded JSON. This allows the Telestion helper functions to\nverify and automatically re-instantiate it with the correct class type.")),(0,s.kt)("h2",{id:"next-steps"},"Next steps"),(0,s.kt)("p",null,"With that, you've used your first actual Telestion API. And you've gotten away\nfrom nasty, unsafe type casts."),(0,s.kt)("p",null,"In the next tutorial, you'll learn how to add configuration options to your\nVerticle. After that, you're already equipped with the knowledge to understand\nalmost all real Verticles in Telestion projects."),(0,s.kt)(i.s3,{to:"/application/tutorials/adding-configuration-options/",mdxType:"Reference"},"Adding configuration options"))}d.isMDXComponent=!0}}]);