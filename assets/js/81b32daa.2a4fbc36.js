"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[4906],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,f=d["".concat(s,".").concat(u)]||d[u]||p[u]||i;return n?a.createElement(f,r(r({ref:t},m),{},{components:n})):a.createElement(f,r({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5335:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(7462),o=(n(7294),n(3905));const i={toc:[]};function r(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Deprecated: Vert.x-based Telestion",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Please note that the application and development of backend services using Vert.x in Telestion are deprecated. In the future, Telestion backend services will be developed using TypeScript and Deno, or through custom integrations with other languages."),(0,o.kt)("p",{parentName:"admonition"},"While there may be a compatibility layer for Vert.x services in the future, its availability is not guaranteed."),(0,o.kt)("p",{parentName:"admonition"},"For developing backend services, please refer to the (Work-in-Progress) documentation available here: ",(0,o.kt)("a",{parentName:"p",href:"https://pklaschka.github.io/telestion-docs-new/"},"https://pklaschka.github.io/telestion-docs-new/"),". Once the documentation is complete, it will be moved to the main Telestion documentation."),(0,o.kt)("p",{parentName:"admonition"},"Additional Information:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"NATS will be used as the distributed message bus/message broker for Telestion."),(0,o.kt)("li",{parentName:"ul"},"NATS' integrated authentication and authorization features will handle authentication and authorization for Ground Station operators, providing a single source of truth."),(0,o.kt)("li",{parentName:"ul"},"The event bus bridge will no longer be featured, and clients will be directly connected to the NATS server.")),(0,o.kt)("p",{parentName:"admonition"},"To establish a more technology-independent terminology, the Telestion project will modify the naming conventions as follows:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The NATS server will be referred to as the message broker, message bus, or NATS server interchangeably."),(0,o.kt)("li",{parentName:"ul"},"Components that act as services without an attached user interface, will be referred to as services or backend services collectively."),(0,o.kt)("li",{parentName:"ul"},'Components that provide a user interface, formerly known as "clients," will be referred to as frontends. In most cases, the frontend will authenticate to the message broker as the user, while backend services will act on their own behalf.')),(0,o.kt)("p",{parentName:"admonition"},'These changes aim to provide clearer and more consistent terminology, accounting for the possibility of components having both service and frontend functionalities. Additionally, the use of "client" for frontends will be replaced to avoid potential confusion.'),(0,o.kt)("p",{parentName:"admonition"},"We recommend using the NATS client libraries recommended by NATS itself, unless there are no suitable options available for the targeted language/environment. We will not develop our own client libraries unless there is a lack of suitable options or significant advantages justify the effort."),(0,o.kt)("p",{parentName:"admonition"},"While Deno/TypeScript is the recommended choice for backend services, its use is not mandatory. Developers will be encouraged to use Deno/TypeScript where appropriate, but other options will still be supported for specific services. Comprehensive documentation and resources will be provided for writing and deploying Deno-based backend services in TypeScript."),(0,o.kt)("p",{parentName:"admonition"},"Please consider these changes and updates as you continue with Telestion development.")))}r.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>s,rj:()=>o,Ee:()=>d,s3:()=>r});var a=n(7294);function o(e){let{cols:t=2,children:n}=e;return a.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var i=n(9960);function r(e){let{children:t,to:n}=e;return a.createElement(i.Z,{to:n,className:"block-link"},a.createElement("span",null,t," \xbb"),a.createElement("span",null,n))}const l=()=>a.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},a.createElement("defs",null,a.createElement("style",null,".a{clip-path:url(#b);}"),a.createElement("clipPath",{id:"b"},a.createElement("rect",{width:24,height:24}))),a.createElement("g",{id:"a",className:"a"},a.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function s(e){let{children:t,file:n}=e;return a.createElement("a",{className:"block-link",download:!0,href:n},a.createElement("span",null,a.createElement(l,null)," ",t))}var c=n(7462),m=n(4996),p=n(6010);function d(e){let{src:t,invertible:n=!1,center:o=!1,alt:r="",...l}=e;const s=t.startsWith("/static")?t.substr(7):t,d=(0,m.Z)(s);return a.createElement(a.Fragment,null,a.createElement(i.Z,{to:s,style:{display:"none"}},"Link to ",r),a.createElement("img",(0,c.Z)({src:d,className:(0,p.Z)(n&&"invertible",o&&"center"),alt:r},l)))}n(5335)},3432:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=n(7462),o=(n(7294),n(3905)),i=n(4966);const r={title:"Conventional Commits",description:"Conventional commits are a method of writing both machine-parsable and human-readable commit messages in a uniform way."},l=void 0,s={unversionedId:"internal/concepts/conventional-commits",id:"internal/concepts/conventional-commits",title:"Conventional Commits",description:"Conventional commits are a method of writing both machine-parsable and human-readable commit messages in a uniform way.",source:"@site/docs/internal/concepts/conventional-commits.mdx",sourceDirName:"internal/concepts",slug:"/internal/concepts/conventional-commits",permalink:"/internal/concepts/conventional-commits",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/internal/concepts/conventional-commits.mdx",tags:[],version:"current",frontMatter:{title:"Conventional Commits",description:"Conventional commits are a method of writing both machine-parsable and human-readable commit messages in a uniform way."},sidebar:"internal",previous:{title:"Concepts",permalink:"/internal/concepts"},next:{title:"Error/Exception Messages (Code)",permalink:"/internal/concepts/error-messages"}},c={},m=[{value:"Examples",id:"examples",level:2},{value:"See also",id:"see-also",level:2}],p={toc:m};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Conventional commits are a method of writing git commit messages in a\nstandardized format that also enables automatic determination of the next\nrelease type in a semantic versioning system."),(0,o.kt)("p",null,"Conventional commits consist of five primary elements:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"type"),": The kind of the commit. The type can be one of a pre-configured number\nof elements, including (in this project) ",(0,o.kt)("inlineCode",{parentName:"li"},"feat")," for features, ",(0,o.kt)("inlineCode",{parentName:"li"},"fix")," for bug\nfixes, ",(0,o.kt)("inlineCode",{parentName:"li"},"docs")," for documentation updates, ",(0,o.kt)("inlineCode",{parentName:"li"},"chore")," for meta-stuff in the\nrepository (not updating the packages), and some more."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"scope")," (optional): The scope of the change, for example, the package name or\nsomething like ",(0,o.kt)("inlineCode",{parentName:"li"},"ci")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"description"),": a one-liner description of the type (feature, bug fix, or\nsomething else)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"body")," (optional): more detailed descriptions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"footer")," (optional): key-value-pairs of extra meta information, for example,\nfixed GitHub issues")),(0,o.kt)("p",null,"All in all, the structure looks something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<type>[(optional scope)][!]: <description>\n\n[optional body]\n\n[optional footers]\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"Since this doesn't look too intuitive, here are a couple of examples of actual\ncommit messages:"),(0,o.kt)("admonition",{title:"Example: A commit message for a bug fix introducing breaking changes",type:"tip"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"fix!: Fix parameter conversion in `updateParents()`\n\nBefore, it automatically converted strings to numbers in such a\nway that non-number inputs also got allowed. This is now changed.\n\nFixes: #8\nBREAKING CHANGE: Non-number inputs no lead to `updateParents()` to\nthrow\n"))),(0,o.kt)("admonition",{title:"Example: A commit message for a feature in the package pkg-1",type:"tip"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"feat(pkg-1): Constructor for JSON parameter\n\nadded constructor for a JSON string as the single parameter\nto `PackageOneClass`\n\nFixes: #22\nCo-Authored-By: Pablo Klaschka <contact@pabloklaschka.de>\n"))),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)(i.s3,{to:"/internal/references/conventional-commit-types",mdxType:"Reference"},"Commit Types Reference"),(0,o.kt)(i.s3,{to:"https://www.conventionalcommits.org/en/v1.0.0/",mdxType:"Reference"},"Conventional Commits Website/Specification"))}d.isMDXComponent=!0}}]);