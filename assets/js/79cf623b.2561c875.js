"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[5416],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||p[d]||i;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5335:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(7462),r=(n(7294),n(3905));const i={toc:[]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Deprecated: Vert.x-based Telestion",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Please note that the application and development of backend services using Vert.x in Telestion are deprecated. In the future, Telestion backend services will be developed using TypeScript and Deno, or through custom integrations with other languages."),(0,r.kt)("p",{parentName:"admonition"},"While there may be a compatibility layer for Vert.x services in the future, its availability is not guaranteed."),(0,r.kt)("p",{parentName:"admonition"},"For developing backend services, please refer to the (Work-in-Progress) documentation available here: ",(0,r.kt)("a",{parentName:"p",href:"https://pklaschka.github.io/telestion-docs-new/"},"https://pklaschka.github.io/telestion-docs-new/"),". Once the documentation is complete, it will be moved to the main Telestion documentation."),(0,r.kt)("p",{parentName:"admonition"},"Additional Information:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"NATS will be used as the distributed message bus/message broker for Telestion."),(0,r.kt)("li",{parentName:"ul"},"NATS' integrated authentication and authorization features will handle authentication and authorization for Ground Station operators, providing a single source of truth."),(0,r.kt)("li",{parentName:"ul"},"The event bus bridge will no longer be featured, and clients will be directly connected to the NATS server.")),(0,r.kt)("p",{parentName:"admonition"},"To establish a more technology-independent terminology, the Telestion project will modify the naming conventions as follows:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The NATS server will be referred to as the message broker, message bus, or NATS server interchangeably."),(0,r.kt)("li",{parentName:"ul"},"Components that act as services without an attached user interface, will be referred to as services or backend services collectively."),(0,r.kt)("li",{parentName:"ul"},'Components that provide a user interface, formerly known as "clients," will be referred to as frontends. In most cases, the frontend will authenticate to the message broker as the user, while backend services will act on their own behalf.')),(0,r.kt)("p",{parentName:"admonition"},'These changes aim to provide clearer and more consistent terminology, accounting for the possibility of components having both service and frontend functionalities. Additionally, the use of "client" for frontends will be replaced to avoid potential confusion.'),(0,r.kt)("p",{parentName:"admonition"},"We recommend using the NATS client libraries recommended by NATS itself, unless there are no suitable options available for the targeted language/environment. We will not develop our own client libraries unless there is a lack of suitable options or significant advantages justify the effort."),(0,r.kt)("p",{parentName:"admonition"},"While Deno/TypeScript is the recommended choice for backend services, its use is not mandatory. Developers will be encouraged to use Deno/TypeScript where appropriate, but other options will still be supported for specific services. Comprehensive documentation and resources will be provided for writing and deploying Deno-based backend services in TypeScript."),(0,r.kt)("p",{parentName:"admonition"},"Please consider these changes and updates as you continue with Telestion development.")))}o.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>l,rj:()=>r,Ee:()=>u,s3:()=>o});var a=n(7294);function r(e){let{cols:t=2,children:n}=e;return a.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var i=n(9960);function o(e){let{children:t,to:n}=e;return a.createElement(i.Z,{to:n,className:"block-link"},a.createElement("span",null,t," \xbb"),a.createElement("span",null,n))}const s=()=>a.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},a.createElement("defs",null,a.createElement("style",null,".a{clip-path:url(#b);}"),a.createElement("clipPath",{id:"b"},a.createElement("rect",{width:24,height:24}))),a.createElement("g",{id:"a",className:"a"},a.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function l(e){let{children:t,file:n}=e;return a.createElement("a",{className:"block-link",download:!0,href:n},a.createElement("span",null,a.createElement(s,null)," ",t))}var c=n(7462),m=n(4996),p=n(6010);function u(e){let{src:t,invertible:n=!1,center:r=!1,alt:o="",...s}=e;const l=t.startsWith("/static")?t.substr(7):t,u=(0,m.Z)(l);return a.createElement(a.Fragment,null,a.createElement(i.Z,{to:l,style:{display:"none"}},"Link to ",o),a.createElement("img",(0,c.Z)({src:u,className:(0,p.Z)(n&&"invertible",r&&"center"),alt:o},s)))}n(5335)},2287:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905)),i=n(4966);const o={title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of the Telestion project modules have to fulfill"},s=void 0,l={unversionedId:"internal/references/maintainers-tasks",id:"internal/references/maintainers-tasks",title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of the Telestion project modules have to fulfill",source:"@site/docs/internal/references/maintainers-tasks.mdx",sourceDirName:"internal/references",slug:"/internal/references/maintainers-tasks",permalink:"/internal/references/maintainers-tasks",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/internal/references/maintainers-tasks.mdx",tags:[],version:"current",frontMatter:{title:"Maintainer's Tasks",description:"An overview of the tasks maintainers of the Telestion project modules have to fulfill"},sidebar:"internal",previous:{title:"Key Git Principles",permalink:"/internal/references/key-git-principles"},next:{title:"Unexpected Error Message Structure",permalink:"/internal/references/unexpected-error-message-structure"}},c={},m=[{value:"CLAs",id:"clas",level:2},{value:"Conventional Commits",id:"conventional-commits",level:2}],p={toc:m};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document provides a reference of the key tasks maintainers within the\nTelestion ecosystem have to fulfill."),(0,r.kt)("h2",{id:"clas"},"CLAs"),(0,r.kt)("p",null,"Make sure that all contributions are by contributors who have signed the CLA.\nOtherwise, this project gets into a lot of legal trouble."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"If a Pull Request doesn't contain a filled checkbox or other notice about the\ncontributor having signed the NDA, ",(0,r.kt)("strong",{parentName:"p"}," don't merge it!"),". If you suspect you\nmight have made a mistake in this regard, please talk to your team leader about\nit as soon as possible.")),(0,r.kt)("h2",{id:"conventional-commits"},"Conventional Commits"),(0,r.kt)("p",null,"Make sure that every change has a conventional commit associated with it."),(0,r.kt)("p",null,"Having a conventional commit for every change enables the project's tools to\nautomatically generate the release notes and the next released version. Thus, if\na branch has valid and correct conventional commit messages, you can go ahead\nand merge it by rebasing it onto the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," branch."),(0,r.kt)("p",null,"Otherwise, you may have to squash and merge using a valid conventional commit\nmessage. In the end, the only important thing is that every change that's\nrelevant for the following kind of version (for example, a feature or a breaking\nchange) or the next version's release notes have a valid conventional commit for\nit in the main branch."),(0,r.kt)("admonition",{title:"Merge commits",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Merge commits appear not to get used (to their full extent). If, for merging a\nPull Request, you need a new conventional commit message, use Squash and Merge")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'For some contributions, it just isn\'t practical to have one merge-able branch\nper change. For example, refactoring might, in the process, also fix a lot of\nold issues. In that case, you can squash and merge using the "biggest"\napplicable conventional commit (for example, ',(0,r.kt)("inlineCode",{parentName:"p"},"feat: Big Refactoring"),"), while\nputting ",(0,r.kt)("inlineCode",{parentName:"p"},"Closes: #issuenumber")," for every closed issue into the commit's footer.\nEven though fixing a bug would, initially, be a fix, the feature of a more\nwide-spread refactoring (with possibly one or two breaking changes) outweighs\nthat, and fixing a bug is just a side-effect.")),(0,r.kt)(i.s3,{to:"/internal/references/conventional-commit-types",mdxType:"Reference"},"More information regarding conventional commit types"))}u.isMDXComponent=!0}}]);