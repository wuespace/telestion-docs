"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[1977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4966:(e,t,n)=>{n.d(t,{kN:()=>l,rj:()=>a,Ee:()=>d,s3:()=>o});var r=n(7294);function a(e){let{cols:t=2,children:n}=e;return r.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var i=n(9960);function o(e){let{children:t,to:n}=e;return r.createElement(i.Z,{to:n,className:"block-link"},r.createElement("span",null,t," \xbb"),r.createElement("span",null,n))}const s=()=>r.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},r.createElement("defs",null,r.createElement("style",null,".a{clip-path:url(#b);}"),r.createElement("clipPath",{id:"b"},r.createElement("rect",{width:24,height:24}))),r.createElement("g",{id:"a",className:"a"},r.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function l(e){let{children:t,file:n}=e;return r.createElement("a",{className:"block-link",download:!0,href:n},r.createElement("span",null,r.createElement(s,null)," ",t))}var u=n(7462),c=n(4996),p=n(6010);function d(e){let{src:t,invertible:n=!1,center:a=!1,alt:o="",...s}=e;const l=t.startsWith("/static")?t.substr(7):t,d=(0,c.Z)(l);return r.createElement(r.Fragment,null,r.createElement(i.Z,{to:l,style:{display:"none"}},"Link to ",o),r.createElement("img",(0,u.Z)({src:d,className:(0,p.Z)(n&&"invertible",a&&"center"),alt:o},s)))}},6720:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),i=n(4966);const o={title:"Writing asynchronous code",description:"Writing asynchronous code is a core requirement in Telestion. Learn what library and language features you can use to write code in Telestion."},s=void 0,l={unversionedId:"application/guides/writing-asynchronous-code",id:"application/guides/writing-asynchronous-code",title:"Writing asynchronous code",description:"Writing asynchronous code is a core requirement in Telestion. Learn what library and language features you can use to write code in Telestion.",source:"@site/docs/application/guides/201-writing-asynchronous-code.mdx",sourceDirName:"application/guides",slug:"/application/guides/writing-asynchronous-code",permalink:"/application/guides/writing-asynchronous-code",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/application/guides/201-writing-asynchronous-code.mdx",tags:[],version:"current",sidebarPosition:201,frontMatter:{title:"Writing asynchronous code",description:"Writing asynchronous code is a core requirement in Telestion. Learn what library and language features you can use to write code in Telestion."},sidebar:"application",previous:{title:"Writing your own traits",permalink:"/application/guides/writing-your-own-traits"},next:{title:"References",permalink:"/application/references"}},u={},c=[{value:"Why writing asynchronous?",id:"why-writing-asynchronous",level:2},{value:"Asynchronous code structures",id:"asynchronous-code-structures",level:2},{value:"Recurring events",id:"recurring-events",level:3},{value:"Concept of anonymous and reference functions",id:"concept-of-anonymous-and-reference-functions",level:4},{value:"Vert.x handlers",id:"vertx-handlers",level:4},{value:"One-time events",id:"one-time-events",level:3},{value:"Futures",id:"futures",level:4},{value:"Promises",id:"promises",level:4},{value:"Mapping Future Results",id:"mapping-future-results",level:4},{value:"Composing Futures",id:"composing-futures",level:4},{value:"Recovering Futures",id:"recovering-futures",level:4},{value:"Transforming Futures",id:"transforming-futures",level:4},{value:"Finalizing Futures",id:"finalizing-futures",level:4},{value:"See also",id:"see-also",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide teaches you how to write asynchronous code with the help of several\nlanguage and library features."),(0,a.kt)("admonition",{title:"Is this the right guide for you?",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This guide primarily targets Backend Developers and everyone who wants to\nunderstand and write asynchronous code."),(0,a.kt)("p",{parentName:"admonition"},"To best understand the topics covered here, you should be familiar with the\nfollowing concepts before reading this article:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/application/concepts/vertx"},"The Vert.x framework")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/application/concepts/verticle"},"The Verticle")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/application/concepts/event-loop"},"Event Loop")))),(0,a.kt)("h2",{id:"why-writing-asynchronous"},"Why writing asynchronous?"),(0,a.kt)("p",null,"Accessing resources that aren't immediately available like reading files from\nthe filesystem or launching a HTTP server take time and can block the event loop\nof a verticle. This can slow down the specific verticle and in the worst case\nthe entire application, resulting in dropped mission-critical data."),(0,a.kt)("p",null,"Therefore, Vert.x and Telestion make usage of asynchronous code execution."),(0,a.kt)("p",null,"Java and Vert.x provide different mechanisms to fulfill that requirement."),(0,a.kt)("p",null,"Lets take a look at some of them."),(0,a.kt)("h2",{id:"asynchronous-code-structures"},"Asynchronous code structures"),(0,a.kt)("h3",{id:"recurring-events"},"Recurring events"),(0,a.kt)("h4",{id:"concept-of-anonymous-and-reference-functions"},"Concept of anonymous and reference functions"),(0,a.kt)("p",null,"Handlers or lambda functions are nothing more than functions passed as arguments\ninto other functions."),(0,a.kt)("p",null,'Sometimes, the passed function is already defined as an instance or class method\ninside the class or declared "on-the-fly" like lambda functions (also called\nanonymous functions).'),(0,a.kt)("p",null,"To receive functions as arguments and successfully call them, you need a\nfunctional interface."),(0,a.kt)("p",null,"Lets define a function that receives two operands, evaluate them and return the\nresult:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MathFunction.java"',title:'"MathFunction.java"'},"@FunctionalInterface\npublic interface MathFunction {\n  int handle(int op1, int op2);\n}\n")),(0,a.kt)("p",null,"Now, use this definition to combine multiple values from e.g. an integer array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MathReducer.java"',title:'"MathReducer.java"'},"public class MathReducer {\n  public static int reduce(int[] values, MathFunction function) {\n    if (values.length < 1) return 0;\n    if (values.length < 2) return values[0];\n\n    int result = function.handle(values[0], values[1]);\n\n    for (int i = 2; i < values.length; i++) {\n      result = function.handle(result, values[i]);\n    }\n\n    return result;\n  }\n\n  public static int add(int op1, int op2) {\n    return op1 + op2;\n  }\n\n  public static int multiply(int op1, int op2) {\n    return op1 * op2;\n  }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"reduce"),' method receives the value array and a function to combine two\nvalues into one. Additionally, there are some predefined "reducer" functions\nlike summation or multiplication.'),(0,a.kt)("p",null,"Lets use the reducer on a sample set of integer values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Main.java"',title:'"Main.java"'},'public class Main {\n  public static void main(String[] args) {\n    // your integer values you want to reduce\n    var values = new int[]{ 5, 8, 2, 4, 11 };\n\n    // use predefined functions via the \'::\' scope operator\n    System.out.println("Sum: " + MathReducer.reduce(values, MathReducer::add)); // 30\n    System.out.println("Product: " + MathReducer.reduce(values, MathReducer::multiply)); // 3520\n\n    // or define your own specialised function handler on the fly\n    // (called lambda or anonymous function)\n    System.out.println("Modulo: " + MathReducer.reduce(values, (op1, op2) -> op1 % op2)); // 1\n  }\n}\n')),(0,a.kt)("p",null,"In the first example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"reducer")," takes the sample array and a reference to\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," method to summarize all values. The second example does roughly the\nsame with one exception that the values aren't getting summed up, but instead\nmultiplied with the ",(0,a.kt)("inlineCode",{parentName:"p"},"multiply")," method. The last example doesn't use a predefined\nmethod at all, but instead define an anonymous function directly in the function\ncall to calculate the residual value."),(0,a.kt)("p",null,"As you can see, you don't need to change the core implementation of the ",(0,a.kt)("inlineCode",{parentName:"p"},"reduce"),"\nmethod to handle a great collection of mathematical functions. Cool, isn't it?"),(0,a.kt)("h4",{id:"vertx-handlers"},"Vert.x handlers"),(0,a.kt)("p",null,"Vert.x already provides a function definition that is used all around in the\nVert.x ecosystem."),(0,a.kt)(i.s3,{to:"https://javadoc.io/static/io.vertx/vertx-core/4.2.6/index.html?io/vertx/core/Handler.html",mdxType:"Reference"},"Vert.x ",(0,a.kt)("code",null,"Handler")," API reference"),(0,a.kt)("p",null,"For example, registering a consumer on an event bus address uses this type\ndefinition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RegisterVerticle.java"',title:'"RegisterVerticle.java"'},'public class RegisterVerticle extends TelestionVerticle<NoConfiguration> {\n  @Override\n  public void onStart() {\n    vertx.eventBus().consumer("some-address", message -> {\n      // I\'m a lambda function of the type "Handler<Message>"\n    });\n  }\n}\n')),(0,a.kt)("h3",{id:"one-time-events"},"One-time events"),(0,a.kt)("h4",{id:"futures"},"Futures"),(0,a.kt)("p",null,"Futures wrap asynchronous operations and provide a unified event-driven API to\nlisten for a result from the wrapped operation and act accordingly."),(0,a.kt)("p",null,"A future has three states:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"Pending")," state which is the ",(0,a.kt)("em",{parentName:"li"},"initial")," state during creation"),(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"Success")," state which indicates that the asynchronous operation has ended\n",(0,a.kt)("em",{parentName:"li"},"successfully")),(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"Failure")," state which indicates that the asynchronous operation has ended\n",(0,a.kt)("em",{parentName:"li"},"with errors"))),(0,a.kt)(i.Ee,{src:"/static/img/drawio-diagrams/vertx/promise-states.drawio.svg",invertible:!0,center:!0,mdxType:"Image"}),(0,a.kt)("p",null,"Due to the nature of futures not completing immediately, you can add event\nhandlers to the future object that are called based on the outcome of the\nasynchronous operation represented by the future:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"use the ",(0,a.kt)("inlineCode",{parentName:"li"},"onSuccess")," handler to run further steps if the operation has ended\n",(0,a.kt)("em",{parentName:"li"},"successfully")),(0,a.kt)("li",{parentName:"ul"},"use the ",(0,a.kt)("inlineCode",{parentName:"li"},"onFailure")," handler to run further steps if the operation has ended\n",(0,a.kt)("em",{parentName:"li"},"with errors")),(0,a.kt)("li",{parentName:"ul"},"use the ",(0,a.kt)("inlineCode",{parentName:"li"},"onComplete")," handler if you only interested in the completion of the\noperation ",(0,a.kt)("em",{parentName:"li"},"regardless")," of the outcome")),(0,a.kt)("p",null,"Take a look at the following example on requesting information via the event\nbus:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Requester.java"',title:'"Requester.java"'},'public class Requester extends TelestionVerticle<NoConfiguration> implements WithEventBus {\n  public static void main(String[] args) {\n    var vertx = Vertx.vertx();\n\n    vertx.eventBus().consumer("some-address", message -> message.reply("Pong"));\n    vertx.deployVerticle(new Requester());\n  }\n\n  @Override\n  public void onStart() throws Exception {\n    request("some-address", "Ping")\n        .onSuccess(message -> logger.info("Response: {}", message.body().toString()))\n        .onFailure(error -> logger.error("Cannot request infos:", error))\n        .onComplete(result -> logger.debug("Request has succeeded or failed."));\n\n    logger.debug("Request sent.");\n\n    // 1. Request sent.\n    // 2. Response: Pong\n    // 3. Request has succeeded or failed.\n  }\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"request")," method receives the target address and a message for the\nresponder. Additionally, it returns a future which succeeds if the response if\npositive and fails if the response is negative."),(0,a.kt)("p",null,"Directly after the call, the future is still pending. Therefore, the logger call\nbelow the request runs first."),(0,a.kt)("p",null,"Eventually, the future completes. Then the future calls (depending on the\nresult) the success or failure handler and, in any event, the completion\nhandler."),(0,a.kt)("h4",{id:"promises"},"Promises"),(0,a.kt)("p",null,'Promises are the "inner" part of futures. They control the final future state\nand pass through the computed result (if there is any).'),(0,a.kt)("p",null,"The best examples are the ",(0,a.kt)("inlineCode",{parentName:"p"},"onStart")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onStop")," methods of the\n",(0,a.kt)("inlineCode",{parentName:"p"},"TelestionVerticle"),'. Here, the extending verticle methods receive promises that\ninform the "outer" world about their final state.'),(0,a.kt)("p",null,"This verticle starts a HTTP server that listens on port ",(0,a.kt)("inlineCode",{parentName:"p"},"8080"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="HttpServerVerticle.java"',title:'"HttpServerVerticle.java"'},"public class HttpServerVerticle extends TelestionVerticle<NoConfiguration> {\n  @Override\n  public void onStart(Promise<Void> startPromise) throws Exception {\n    server = vertx.createHttpServer();\n    server.listen(8080)\n        .onSuccess(server -> startPromise.complete())\n        .onFailure(startPromise::fail);\n  }\n\n  @Override\n  public void onStop(Promise<Void> stopPromise) throws Exception {\n    server.close().onComplete(stopPromise);\n  }\n\n  private HttpServer server;\n}\n")),(0,a.kt)("p",null,"The verticle registers a success handler on the future returned by the\n",(0,a.kt)("inlineCode",{parentName:"p"},"server.listen")," method (as described in ",(0,a.kt)("a",{parentName:"p",href:"#futures"},"futures"),"). This method\ncompletes the ",(0,a.kt)("inlineCode",{parentName:"p"},"startPromise"),', which in turn informs the "outer" world about the\nsuccessful startup of the entire verticle.'),(0,a.kt)("p",null,'To capture startup failures of the HTTP server, the registered failure handler\nreceives possible startup errors and passes them through to the "outer" world\nvia the ',(0,a.kt)("inlineCode",{parentName:"p"},"startPromise.fail")," method."),(0,a.kt)("p",null,"To gracefully stop the server on verticle stop, use the same principle on the\nreturned future from the ",(0,a.kt)("inlineCode",{parentName:"p"},"server.close")," method. Because of equivalent types of\npromise and future you can directly use the ",(0,a.kt)("inlineCode",{parentName:"p"},"onComplete")," event to control the\nprovided promise. This keeps the source code short and readable."),(0,a.kt)("admonition",{title:"Type Mismatch",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Sometimes, the future and promise types don't match. This prevents you from\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"onComplete(promise)")," shorthand. To fix this issue, you can use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"map")," function on the future to change the futures return type to the desired\nresult before completing the promise via the shorthand call."),(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"mapEmpty")," function changes the futures return type to ",(0,a.kt)("inlineCode",{parentName:"p"},"Void")," to also\nsupport void promises.")),(0,a.kt)("h4",{id:"mapping-future-results"},"Mapping Future Results"),(0,a.kt)(i.Ee,{src:"/static/img/drawio-diagrams/vertx/future-map.drawio.svg",invertible:!0,center:!0,mdxType:"Image"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," function has the same behavior as the ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," function of a stream. It\nreceives the result from the succeeded future and returns the replacement. Use\n",(0,a.kt)("inlineCode",{parentName:"p"},"mapEmpty")," to map to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Void")," value."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"otherwise")," function has the same behavior as the ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," function but only\nchanges the rejected result (exceptions most of the time) if the future fails.\nUse ",(0,a.kt)("inlineCode",{parentName:"p"},"otherwiseEmpty")," to map to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Void")," value."),(0,a.kt)("h4",{id:"composing-futures"},"Composing Futures"),(0,a.kt)(i.Ee,{src:"/static/img/drawio-diagrams/vertx/future-compose.drawio.svg",invertible:!0,center:!0,mdxType:"Image"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"compose"),' function receives the result from the succeeded future and returns\nanother future that "replaces" the old one.'),(0,a.kt)("p",null,"If the start future or the replacement future failes, following ",(0,a.kt)("inlineCode",{parentName:"p"},"compose"),"\nfunctions get skipped."),(0,a.kt)("h4",{id:"recovering-futures"},"Recovering Futures"),(0,a.kt)(i.Ee,{src:"/static/img/drawio-diagrams/vertx/future-recover.drawio.svg",invertible:!0,center:!0,mdxType:"Image"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"recover"),' function can "recover" a future from a failure state. It receives\nthe failure result and returns another future that "replaces" the old one.'),(0,a.kt)("p",null,"If the start future or the replacement future succeeds, following ",(0,a.kt)("inlineCode",{parentName:"p"},"recover"),"\nfunctions get skipped."),(0,a.kt)("h4",{id:"transforming-futures"},"Transforming Futures"),(0,a.kt)(i.Ee,{src:"/static/img/drawio-diagrams/vertx/future-transform.drawio.svg",invertible:!0,center:!0,mdxType:"Image"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"transform"),' function receives the succeeded result or the failed result\ndepending on the future\'s final state. It returns a new future which "replaces"\nthe old one.'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transform")," functions are called regardless of the final state of the prior\nfuture."),(0,a.kt)("h4",{id:"finalizing-futures"},"Finalizing Futures"),(0,a.kt)(i.Ee,{src:"/static/img/drawio-diagrams/vertx/future-eventually.drawio.svg",invertible:!0,center:!0,mdxType:"Image"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"eventually"),' function "blocks" the result transmission on the calling\nfuture. The function receives the succeeded or failed result depending on the\nfuture\'s final state and should return a new future.'),(0,a.kt)("p",null,"Once the returned future succeeds or fails, the lock is raised and the calling\nfuture continues."),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)(i.s3,{to:"/application/concepts/event-loop",mdxType:"Reference"},"Event Loop Concept"),(0,a.kt)(i.s3,{to:"https://javadoc.io/static/io.vertx/vertx-core/4.2.6/index.html?io/vertx/core/Handler.html",mdxType:"Reference"},"Vert.x ",(0,a.kt)("code",null,"Handler")," API reference"),(0,a.kt)(i.s3,{to:"https://javadoc.io/static/io.vertx/vertx-core/4.2.6/index.html?io/vertx/core/Future.html",mdxType:"Reference"},"Vert.x ",(0,a.kt)("code",null,"Future")," API Reference"))}d.isMDXComponent=!0}}]);