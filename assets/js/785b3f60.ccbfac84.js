"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[7525],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?i.createElement(h,r(r({ref:t},p),{},{components:n})):i.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5335:(e,t,n)=>{n.d(t,{ZP:()=>r});var i=n(7462),a=(n(7294),n(3905));const o={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Deprecated: Vert.x-based Telestion",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Please note that the application and development of backend services using Vert.x in Telestion are deprecated. In the future, Telestion backend services will be developed using TypeScript and Deno, or through custom integrations with other languages."),(0,a.kt)("p",{parentName:"admonition"},"While there may be a compatibility layer for Vert.x services in the future, its availability is not guaranteed."),(0,a.kt)("p",{parentName:"admonition"},"For developing backend services, please refer to the (Work-in-Progress) documentation available here: ",(0,a.kt)("a",{parentName:"p",href:"https://pklaschka.github.io/telestion-docs-new/"},"https://pklaschka.github.io/telestion-docs-new/"),". Once the documentation is complete, it will be moved to the main Telestion documentation."),(0,a.kt)("p",{parentName:"admonition"},"Additional Information:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"NATS will be used as the distributed message bus/message broker for Telestion."),(0,a.kt)("li",{parentName:"ul"},"NATS' integrated authentication and authorization features will handle authentication and authorization for Ground Station operators, providing a single source of truth."),(0,a.kt)("li",{parentName:"ul"},"The event bus bridge will no longer be featured, and clients will be directly connected to the NATS server.")),(0,a.kt)("p",{parentName:"admonition"},"To establish a more technology-independent terminology, the Telestion project will modify the naming conventions as follows:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"The NATS server will be referred to as the message broker, message bus, or NATS server interchangeably."),(0,a.kt)("li",{parentName:"ul"},"Components that act as services without an attached user interface, will be referred to as services or backend services collectively."),(0,a.kt)("li",{parentName:"ul"},'Components that provide a user interface, formerly known as "clients," will be referred to as frontends. In most cases, the frontend will authenticate to the message broker as the user, while backend services will act on their own behalf.')),(0,a.kt)("p",{parentName:"admonition"},'These changes aim to provide clearer and more consistent terminology, accounting for the possibility of components having both service and frontend functionalities. Additionally, the use of "client" for frontends will be replaced to avoid potential confusion.'),(0,a.kt)("p",{parentName:"admonition"},"We recommend using the NATS client libraries recommended by NATS itself, unless there are no suitable options available for the targeted language/environment. We will not develop our own client libraries unless there is a lack of suitable options or significant advantages justify the effort."),(0,a.kt)("p",{parentName:"admonition"},"While Deno/TypeScript is the recommended choice for backend services, its use is not mandatory. Developers will be encouraged to use Deno/TypeScript where appropriate, but other options will still be supported for specific services. Comprehensive documentation and resources will be provided for writing and deploying Deno-based backend services in TypeScript."),(0,a.kt)("p",{parentName:"admonition"},"Please consider these changes and updates as you continue with Telestion development.")))}r.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>s,rj:()=>a,Ee:()=>d,s3:()=>r});var i=n(7294);function a(e){let{cols:t=2,children:n}=e;return i.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var o=n(9960);function r(e){let{children:t,to:n}=e;return i.createElement(o.Z,{to:n,className:"block-link"},i.createElement("span",null,t," \xbb"),i.createElement("span",null,n))}const l=()=>i.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},i.createElement("defs",null,i.createElement("style",null,".a{clip-path:url(#b);}"),i.createElement("clipPath",{id:"b"},i.createElement("rect",{width:24,height:24}))),i.createElement("g",{id:"a",className:"a"},i.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function s(e){let{children:t,file:n}=e;return i.createElement("a",{className:"block-link",download:!0,href:n},i.createElement("span",null,i.createElement(l,null)," ",t))}var c=n(7462),p=n(4996),u=n(6010);function d(e){let{src:t,invertible:n=!1,center:a=!1,alt:r="",...l}=e;const s=t.startsWith("/static")?t.substr(7):t,d=(0,p.Z)(s);return i.createElement(i.Fragment,null,i.createElement(o.Z,{to:s,style:{display:"none"}},"Link to ",r),i.createElement("img",(0,c.Z)({src:d,className:(0,u.Z)(n&&"invertible",a&&"center"),alt:r},l)))}n(5335)},2355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));n(4966);const o={title:"Setting up the development environment",description:"Start a new telestion-client project with the tc-cli"},r=void 0,l={unversionedId:"client/tutorials/dev-env-setup",id:"client/tutorials/dev-env-setup",title:"Setting up the development environment",description:"Start a new telestion-client project with the tc-cli",source:"@site/docs/client/tutorials/100-dev-env-setup.mdx",sourceDirName:"client/tutorials",slug:"/client/tutorials/dev-env-setup",permalink:"/client/tutorials/dev-env-setup",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/client/tutorials/100-dev-env-setup.mdx",tags:[],version:"current",sidebarPosition:100,frontMatter:{title:"Setting up the development environment",description:"Start a new telestion-client project with the tc-cli"},sidebar:"client",previous:{title:"Tutorials",permalink:"/client/tutorials"},next:{title:"Creating your first own widget",permalink:"/client/tutorials/bootstrapping-a-widget"}},s={},c=[{value:"What you&#39;ll build",id:"what-youll-build",level:2},{value:"Step 1: Installing <code>tc-cli</code>",id:"step-1-installing-tc-cli",level:2},{value:"Step 2: Initializing the project",id:"step-2-initializing-the-project",level:2},{value:"Step 3: Run the client",id:"step-3-run-the-client",level:2},{value:"Next steps",id:"next-steps",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this tutorial, you install the telstion-client-cli and generate a new\ntelestion-client project."),(0,a.kt)("admonition",{title:"Prerequisites",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"To complete this tutorial, you should be familiar with basic terminal commands.")),(0,a.kt)("h2",{id:"what-youll-build"},"What you'll build"),(0,a.kt)("p",null,"The result is a project structure that you can begin to customize."),(0,a.kt)("h2",{id:"step-1-installing-tc-cli"},"Step 1: Installing ",(0,a.kt)("inlineCode",{parentName:"h2"},"tc-cli")),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"tc-cli")," by running the following command in your terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --global @wuespace/telestion-client-cli\n")),(0,a.kt)("p",null,"This command installs the CLI, which you can call using the ",(0,a.kt)("inlineCode",{parentName:"p"},"tc-cli")," command."),(0,a.kt)("h2",{id:"step-2-initializing-the-project"},"Step 2: Initializing the project"),(0,a.kt)("p",null,"This step initializes the project."),(0,a.kt)("p",null,"Open the terminal where you want to generate the project and run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"tc-cli init myproject\n")),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"myproject")," with your own desired name."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Using the ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"telestion-project-template")),(0,a.kt)("p",{parentName:"admonition"},"When using the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/wuespace/telestion-project-template"},(0,a.kt)("inlineCode",{parentName:"a"},"telestion-project-template")," repository"),"\nfor your project, just run ",(0,a.kt)("inlineCode",{parentName:"p"},"tc-cli init")," (without a folder name) inside the\nrepo's root folder. This command, then, automatically bootstraps a Client\nproject into the repo's ",(0,a.kt)("inlineCode",{parentName:"p"},"client")," folder.")),(0,a.kt)("p",null,"This command generates a folder with the chosen name that contains a\nready-to-use client project and installs all necessary dependencies."),(0,a.kt)("admonition",{title:"Windows execution policies",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"On Windows machines, you might get an error message about execution policies. In\nthis case, run the power shell as administrator and use this command:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n")),(0,a.kt)("p",{parentName:"admonition"},"Restart your other terminal and re-run the ",(0,a.kt)("inlineCode",{parentName:"p"},"tc-cli")," command.")),(0,a.kt)("h2",{id:"step-3-run-the-client"},"Step 3: Run the client"),(0,a.kt)("p",null,"Run the client by navigating into your folder and run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm start\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This runs ",(0,a.kt)("inlineCode",{parentName:"p"},"tc-cli start --electron")," in the background.")),(0,a.kt)("p",null,"An electron window opens, and you can see your application."),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("p",null,"Now that you've generated your client project, you can configure and extend your\nclient in the following tutorials."))}u.isMDXComponent=!0}}]);