"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[9719],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5335:(e,t,n)=>{n.d(t,{ZP:()=>o});var i=n(7462),a=(n(7294),n(3905));const r={toc:[]};function o(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Deprecated: Vert.x-based Telestion",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Please note that the application and development of backend services using Vert.x in Telestion are deprecated. In the future, Telestion backend services will be developed using TypeScript and Deno, or through custom integrations with other languages."),(0,a.kt)("p",{parentName:"admonition"},"While there may be a compatibility layer for Vert.x services in the future, its availability is not guaranteed."),(0,a.kt)("p",{parentName:"admonition"},"For developing backend services, please refer to the (Work-in-Progress) documentation available here: ",(0,a.kt)("a",{parentName:"p",href:"https://pklaschka.github.io/telestion-docs-new/"},"https://pklaschka.github.io/telestion-docs-new/"),". Once the documentation is complete, it will be moved to the main Telestion documentation."),(0,a.kt)("p",{parentName:"admonition"},"Additional Information:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"NATS will be used as the distributed message bus/message broker for Telestion."),(0,a.kt)("li",{parentName:"ul"},"NATS' integrated authentication and authorization features will handle authentication and authorization for Ground Station operators, providing a single source of truth."),(0,a.kt)("li",{parentName:"ul"},"The event bus bridge will no longer be featured, and clients will be directly connected to the NATS server.")),(0,a.kt)("p",{parentName:"admonition"},"To establish a more technology-independent terminology, the Telestion project will modify the naming conventions as follows:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"The NATS server will be referred to as the message broker, message bus, or NATS server interchangeably."),(0,a.kt)("li",{parentName:"ul"},"Components that act as services without an attached user interface, will be referred to as services or backend services collectively."),(0,a.kt)("li",{parentName:"ul"},'Components that provide a user interface, formerly known as "clients," will be referred to as frontends. In most cases, the frontend will authenticate to the message broker as the user, while backend services will act on their own behalf.')),(0,a.kt)("p",{parentName:"admonition"},'These changes aim to provide clearer and more consistent terminology, accounting for the possibility of components having both service and frontend functionalities. Additionally, the use of "client" for frontends will be replaced to avoid potential confusion.'),(0,a.kt)("p",{parentName:"admonition"},"We recommend using the NATS client libraries recommended by NATS itself, unless there are no suitable options available for the targeted language/environment. We will not develop our own client libraries unless there is a lack of suitable options or significant advantages justify the effort."),(0,a.kt)("p",{parentName:"admonition"},"While Deno/TypeScript is the recommended choice for backend services, its use is not mandatory. Developers will be encouraged to use Deno/TypeScript where appropriate, but other options will still be supported for specific services. Comprehensive documentation and resources will be provided for writing and deploying Deno-based backend services in TypeScript."),(0,a.kt)("p",{parentName:"admonition"},"Please consider these changes and updates as you continue with Telestion development.")))}o.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>l,rj:()=>a,Ee:()=>d,s3:()=>o});var i=n(7294);function a(e){let{cols:t=2,children:n}=e;return i.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var r=n(9960);function o(e){let{children:t,to:n}=e;return i.createElement(r.Z,{to:n,className:"block-link"},i.createElement("span",null,t," \xbb"),i.createElement("span",null,n))}const s=()=>i.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},i.createElement("defs",null,i.createElement("style",null,".a{clip-path:url(#b);}"),i.createElement("clipPath",{id:"b"},i.createElement("rect",{width:24,height:24}))),i.createElement("g",{id:"a",className:"a"},i.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function l(e){let{children:t,file:n}=e;return i.createElement("a",{className:"block-link",download:!0,href:n},i.createElement("span",null,i.createElement(s,null)," ",t))}var c=n(7462),p=n(4996),u=n(6010);function d(e){let{src:t,invertible:n=!1,center:a=!1,alt:o="",...s}=e;const l=t.startsWith("/static")?t.substr(7):t,d=(0,p.Z)(l);return i.createElement(i.Fragment,null,i.createElement(r.Z,{to:l,style:{display:"none"}},"Link to ",o),i.createElement("img",(0,c.Z)({src:d,className:(0,u.Z)(n&&"invertible",a&&"center"),alt:o},s)))}n(5335)},2574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(7462),a=(n(7294),n(3905)),r=n(4966);const o={title:"Using traits in Verticles",description:"Enrich your coding experience in Verticles by using Verticle traits."},s=void 0,l={unversionedId:"application/tutorials/using-traits-in-verticles",id:"application/tutorials/using-traits-in-verticles",title:"Using traits in Verticles",description:"Enrich your coding experience in Verticles by using Verticle traits.",source:"@site/docs/application/tutorials/203-using-traits-in-verticles.mdx",sourceDirName:"application/tutorials",slug:"/application/tutorials/using-traits-in-verticles",permalink:"/application/tutorials/using-traits-in-verticles",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/application/tutorials/203-using-traits-in-verticles.mdx",tags:[],version:"current",sidebarPosition:203,frontMatter:{title:"Using traits in Verticles",description:"Enrich your coding experience in Verticles by using Verticle traits."},sidebar:"application",previous:{title:"Adding configuration options",permalink:"/application/tutorials/adding-configuration-options"},next:{title:"Deploying your project",permalink:"/application/tutorials/deploying-your-project"}},c={},p=[{value:"What you&#39;ll build",id:"what-youll-build",level:2},{value:"Step 1: Add a trait to your Verticle",id:"step-1-add-a-trait-to-your-verticle",level:2},{value:"Step 2: Rewrite the event bus consumer",id:"step-2-rewrite-the-event-bus-consumer",level:2},{value:"Step 3: Rewrite the event bus publisher",id:"step-3-rewrite-the-event-bus-publisher",level:2},{value:"Next steps",id:"next-steps",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It's tedious to do common tasks in Verticles like registering event handlers or\npublishing ",(0,a.kt)("inlineCode",{parentName:"p"},"JsonMessage")," based messages."),(0,a.kt)("p",null,"Doing this over and over again in your Verticle the code becomes bloated and\nunreadable."),(0,a.kt)("p",null,"Provide a better reading experience using traits in your Verticle."),(0,a.kt)("admonition",{title:"Prerequisites",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"To complete this tutorial, you should be familiar with writing basic Verticles\nand using the ",(0,a.kt)("inlineCode",{parentName:"p"},"JsonMessage")," interface from the Telestion APIs.")),(0,a.kt)("h2",{id:"what-youll-build"},"What you'll build"),(0,a.kt)(r.s3,{to:"/application/tutorials/using-jsonmessage/",mdxType:"Reference"},"Base Code"),(0,a.kt)("p",null,"Based on the code from the\n",(0,a.kt)("a",{parentName:"p",href:"/application/tutorials/using-jsonmessage/"},(0,a.kt)("inlineCode",{parentName:"a"},"JsonMessage")," tutorial"),", you'll add\ntraits to your ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageTransformer")," Verticle."),(0,a.kt)("p",null,"For a concept on what a trait actually is, please take a look on this concept:"),(0,a.kt)(r.s3,{to:"/application/concepts/traits/",mdxType:"Reference"},"Traits concept"),(0,a.kt)("p",null,"After the tutorial, your Verticle looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {5,7-8,16,18,19}",title:"'MessageTransformer.java'","{5,7-8,16,18,19}":!0},'package de.wuespace.telestion.project.example;\n\nimport de.wuespace.telestion.api.verticle.NoConfiguration;\nimport de.wuespace.telestion.api.verticle.TelestionVerticle;\nimport de.wuespace.telestion.api.verticle.trait.WithEventBus;\n\npublic class MessageTransformer extends TelestionVerticle<NoConfiguration>\n        implements WithEventBus {\n\n    public static void main(String[] args) throws InterruptedException {\n        // [...]\n    }\n\n    @Override\n    public void onStart() {\n        register("input", message -> {\n            int received = message.value();\n            publish("output", new IntegerMessage(received * 2));\n        }, IntegerMessage.class);\n    }\n}\n')),(0,a.kt)("h2",{id:"step-1-add-a-trait-to-your-verticle"},"Step 1: Add a trait to your Verticle"),(0,a.kt)("p",null,"The Telestion API already provides a lot of traits for your Verticles."),(0,a.kt)(r.s3,{to:"https://javadoc.io/doc/de.wuespace.telestion/telestion-api/latest/de/wuespace/telestion/api/verticle/trait/package-summary.html",mdxType:"Reference"},"List of Telestion Core Verticle traits"),(0,a.kt)("p",null,"Import the ",(0,a.kt)("inlineCode",{parentName:"p"},"WithEventBus")," trait and use it in your ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageTransformer"),"\nVerticle:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {5,7-8}",title:"'MessageTransformer.java'","{5,7-8}":!0},"package de.wuespace.telestion.project.example;\n\nimport de.wuespace.telestion.api.verticle.NoConfiguration;\nimport de.wuespace.telestion.api.verticle.TelestionVerticle;\nimport de.wuespace.telestion.api.verticle.trait.WithEventBus;\n\npublic class MessageTransformer extends TelestionVerticle<NoConfiguration>\n        implements WithEventBus {\n\n    public static void main(String[] args) throws InterruptedException {\n        // [...]\n    }\n\n    @Override\n    public void onStart() {\n        // [...]\n    }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"WithEventBus")," trait contains a bunch of methods to interact with the\n",(0,a.kt)("a",{parentName:"p",href:"/common-concepts/event-bus/"},(0,a.kt)("inlineCode",{parentName:"a"},"EventBus")),"."),(0,a.kt)("p",null,"For more information, take a look at the API reference:"),(0,a.kt)(r.s3,{to:"https://javadoc.io/doc/de.wuespace.telestion/telestion-api/latest/de/wuespace/telestion/api/verticle/trait/WithEventBus.html",mdxType:"Reference"},(0,a.kt)("code",null,"WithEventBus")," API reference"),(0,a.kt)("h2",{id:"step-2-rewrite-the-event-bus-consumer"},"Step 2: Rewrite the event bus consumer"),(0,a.kt)("p",null,"Right now, the Verticle extracts the event bus instance from the ",(0,a.kt)("inlineCode",{parentName:"p"},"vertx")," context\nand registers an event handler and an event bus channel. The incoming message is\nthen converted to an ",(0,a.kt)("inlineCode",{parentName:"p"},"IntegerMessage")," if possible and another event handler gets\ncalled which multiplies the received value."),(0,a.kt)("p",null,"That's a tedious task if you want to consume messages on more than one channel\nthroughout your Verticle."),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method from the ",(0,a.kt)("inlineCode",{parentName:"p"},"WithEventBus"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {18-20}",title:"'MessageTransformer.java'","{18-20}":!0},'package de.wuespace.telestion.project.example;\n\nimport de.wuespace.telestion.api.verticle.NoConfiguration;\nimport de.wuespace.telestion.api.verticle.TelestionVerticle;\nimport de.wuespace.telestion.api.verticle.trait.WithEventBus;\n\npublic class MessageTransformer extends TelestionVerticle<NoConfiguration>\n        implements WithEventBus {\n\n    public static void main(String[] args) throws InterruptedException {\n        // [...]\n    }\n\n    @Override\n    public void onStart() {\n        var eb = vertx.eventBus();\n\n        register("input", message -> {\n            // [...]\n        }, IntegerMessage.class);\n    }\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method combines several operations in one call. First, it\nregisters an event handler on the event bus channel ",(0,a.kt)("inlineCode",{parentName:"p"},'"input"'),". If a messages\narrives at the channel the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method tries to convert received message\nto the specified message type (here ",(0,a.kt)("inlineCode",{parentName:"p"},"IntegerMessage.class"),"). If the conversion\nsucceeded, ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," calls the given event handler with the converted message."),(0,a.kt)("p",null,"In short, it has the same behaviour as the existing implementation but is much\nmore readable and maintainable."),(0,a.kt)("h2",{id:"step-3-rewrite-the-event-bus-publisher"},"Step 3: Rewrite the event bus publisher"),(0,a.kt)("p",null,"To remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"eb")," event bus reference, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"publish")," method\nprovided by the ",(0,a.kt)("inlineCode",{parentName:"p"},"WithEventBus")," trait:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {17-18}",title:"'MessageTransformer.java'","{17-18}":!0},'package de.wuespace.telestion.project.example;\n\nimport de.wuespace.telestion.api.verticle.GenericConfiguration;\nimport de.wuespace.telestion.api.verticle.TelestionVerticle;\nimport de.wuespace.telestion.api.verticle.trait.WithEventBus;\n\npublic class MessageTransformer extends TelestionVerticle<GenericConfiguration>\n        implements WithEventBus {\n\n    public static void main(String[] args) throws InterruptedException {\n        // [...]\n    }\n\n    @Override\n    public void onStart() {\n        register("input", message -> {\n            int received = message.value();\n            publish("output", new IntegerMessage(received * 2));\n        }, IntegerMessage.class);\n    }\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"publish")," is essentially a shorthand to access the\n",(0,a.kt)("inlineCode",{parentName:"p"},"vertx.eventBus().publish()")," method."),(0,a.kt)("p",null,"One neat feature of ",(0,a.kt)("inlineCode",{parentName:"p"},"publish")," is that it does the conversion from a\n",(0,a.kt)("inlineCode",{parentName:"p"},"JsonMessage")," based message back to the ",(0,a.kt)("inlineCode",{parentName:"p"},"JsonObject")," automatically. Thus, you\ndon't need to call ",(0,a.kt)("inlineCode",{parentName:"p"},".json()")," on the message anymore (as described in\n",(0,a.kt)("a",{parentName:"p",href:"/application/tutorials/using-jsonmessage/#step-3-publishing-messages"},"Using ",(0,a.kt)("inlineCode",{parentName:"a"},"JsonMessage")),")."),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("p",null,"That's it. You've used traits in your first Verticle. \ud83c\udf79"),(0,a.kt)("p",null,"It doesn't look like much of an improvement right now, but it cleans up your\ncode in bigger and more complex Verticles."),(0,a.kt)("p",null,"But that's not the end. The Telestion Core provides more traits for Verticles.\nTake a look at them if you like."),(0,a.kt)("p",null,"You can also write your own traits not only for Verticles but much more types."),(0,a.kt)(r.s3,{to:"/application/concepts/traits/",mdxType:"Reference"},"Traits concept"),(0,a.kt)(r.s3,{to:"https://javadoc.io/doc/de.wuespace.telestion/telestion-api/latest/de/wuespace/telestion/api/verticle/trait/package-summary.html",mdxType:"Reference"},"List of Telestion Core Verticle traits"),(0,a.kt)(r.s3,{to:"https://javadoc.io/doc/de.wuespace.telestion/telestion-api/latest/de/wuespace/telestion/api/verticle/trait/WithEventBus.html",mdxType:"Reference"},(0,a.kt)("code",null,"WithEventBus")," API reference"),(0,a.kt)(r.s3,{to:"/application/guides/writing-your-own-traits/",mdxType:"Reference"},"Writing your own traits"))}d.isMDXComponent=!0}}]);