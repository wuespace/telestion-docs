"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[9500],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?i.createElement(h,a(a({ref:t},u),{},{components:n})):i.createElement(h,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5335:(e,t,n)=>{n.d(t,{ZP:()=>a});var i=n(7462),r=(n(7294),n(3905));const o={toc:[]};function a(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Deprecated: Vert.x-based Telestion",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Please note that the application and development of backend services using Vert.x in Telestion are deprecated. In the future, Telestion backend services will be developed using TypeScript and Deno, or through custom integrations with other languages."),(0,r.kt)("p",{parentName:"admonition"},"While there may be a compatibility layer for Vert.x services in the future, its availability is not guaranteed."),(0,r.kt)("p",{parentName:"admonition"},"For developing backend services, please refer to the (Work-in-Progress) documentation available here: ",(0,r.kt)("a",{parentName:"p",href:"https://pklaschka.github.io/telestion-docs-new/"},"https://pklaschka.github.io/telestion-docs-new/"),". Once the documentation is complete, it will be moved to the main Telestion documentation."),(0,r.kt)("p",{parentName:"admonition"},"Additional Information:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"NATS will be used as the distributed message bus/message broker for Telestion."),(0,r.kt)("li",{parentName:"ul"},"NATS' integrated authentication and authorization features will handle authentication and authorization for Ground Station operators, providing a single source of truth."),(0,r.kt)("li",{parentName:"ul"},"The event bus bridge will no longer be featured, and clients will be directly connected to the NATS server.")),(0,r.kt)("p",{parentName:"admonition"},"To establish a more technology-independent terminology, the Telestion project will modify the naming conventions as follows:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The NATS server will be referred to as the message broker, message bus, or NATS server interchangeably."),(0,r.kt)("li",{parentName:"ul"},"Components that act as services without an attached user interface, will be referred to as services or backend services collectively."),(0,r.kt)("li",{parentName:"ul"},'Components that provide a user interface, formerly known as "clients," will be referred to as frontends. In most cases, the frontend will authenticate to the message broker as the user, while backend services will act on their own behalf.')),(0,r.kt)("p",{parentName:"admonition"},'These changes aim to provide clearer and more consistent terminology, accounting for the possibility of components having both service and frontend functionalities. Additionally, the use of "client" for frontends will be replaced to avoid potential confusion.'),(0,r.kt)("p",{parentName:"admonition"},"We recommend using the NATS client libraries recommended by NATS itself, unless there are no suitable options available for the targeted language/environment. We will not develop our own client libraries unless there is a lack of suitable options or significant advantages justify the effort."),(0,r.kt)("p",{parentName:"admonition"},"While Deno/TypeScript is the recommended choice for backend services, its use is not mandatory. Developers will be encouraged to use Deno/TypeScript where appropriate, but other options will still be supported for specific services. Comprehensive documentation and resources will be provided for writing and deploying Deno-based backend services in TypeScript."),(0,r.kt)("p",{parentName:"admonition"},"Please consider these changes and updates as you continue with Telestion development.")))}a.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>l,rj:()=>r,Ee:()=>p,s3:()=>a});var i=n(7294);function r(e){let{cols:t=2,children:n}=e;return i.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var o=n(9960);function a(e){let{children:t,to:n}=e;return i.createElement(o.Z,{to:n,className:"block-link"},i.createElement("span",null,t," \xbb"),i.createElement("span",null,n))}const s=()=>i.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},i.createElement("defs",null,i.createElement("style",null,".a{clip-path:url(#b);}"),i.createElement("clipPath",{id:"b"},i.createElement("rect",{width:24,height:24}))),i.createElement("g",{id:"a",className:"a"},i.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function l(e){let{children:t,file:n}=e;return i.createElement("a",{className:"block-link",download:!0,href:n},i.createElement("span",null,i.createElement(s,null)," ",t))}var c=n(7462),u=n(4996),d=n(6010);function p(e){let{src:t,invertible:n=!1,center:r=!1,alt:a="",...s}=e;const l=t.startsWith("/static")?t.substr(7):t,p=(0,u.Z)(l);return i.createElement(i.Fragment,null,i.createElement(o.Z,{to:l,style:{display:"none"}},"Link to ",a),i.createElement("img",(0,c.Z)({src:p,className:(0,d.Z)(n&&"invertible",r&&"center"),alt:a},s)))}n(5335)},9923:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=n(7462),r=(n(7294),n(3905)),o=n(4966);const a={title:"Building the UI using React Spectrum",description:"The Telestion Client ecosystem uses the Adobe Spectrum Design system for its UI. Learn how to use the React Spectrum implementation to build your widget's UI."},s=void 0,l={unversionedId:"client/tutorials/building-ui-using-react-spectrum",id:"client/tutorials/building-ui-using-react-spectrum",title:"Building the UI using React Spectrum",description:"The Telestion Client ecosystem uses the Adobe Spectrum Design system for its UI. Learn how to use the React Spectrum implementation to build your widget's UI.",source:"@site/docs/client/tutorials/210-building-ui-using-react-spectrum.mdx",sourceDirName:"client/tutorials",slug:"/client/tutorials/building-ui-using-react-spectrum",permalink:"/client/tutorials/building-ui-using-react-spectrum",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/client/tutorials/210-building-ui-using-react-spectrum.mdx",tags:[],version:"current",sidebarPosition:210,frontMatter:{title:"Building the UI using React Spectrum",description:"The Telestion Client ecosystem uses the Adobe Spectrum Design system for its UI. Learn how to use the React Spectrum implementation to build your widget's UI."},sidebar:"client",previous:{title:"Creating your first own widget",permalink:"/client/tutorials/bootstrapping-a-widget"},next:{title:"Connecting the widget with the Event Bus",permalink:"/client/tutorials/connecting-with-event-bus"}},c={},u=[{value:"What you&#39;ll build",id:"what-youll-build",level:2},{value:"Step 1: Build the layout",id:"step-1-build-the-layout",level:2},{value:"Step 2: Add component for a system&#39;s indicator",id:"step-2-add-component-for-a-systems-indicator",level:2},{value:"Next steps",id:"next-steps",level:2}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this tutorial, you'll use the React Spectrum library to build your widget's\nUI. React Spectrum is a React-based implementation of Adobe's Spectrum Design\nsystem. Spectrum Design is the design system used by\n",(0,r.kt)("inlineCode",{parentName:"p"},"@wuespace/telestion-client-common")," library and integrates well into the other\nparts of the client's UI."),(0,r.kt)("admonition",{title:"Prerequisites",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To complete this tutorial, you should be familiar with React, TypeScript, and\nhave a widget bootstrapped according to the\n",(0,r.kt)("a",{parentName:"p",href:"../bootstrapping-a-widget"},"Bootstrapping a widget tutorial"),".")),(0,r.kt)("h2",{id:"what-youll-build"},"What you'll build"),(0,r.kt)("p",null,"You'll build your widget's UI. It should display the connection status\n(Connected / Disconnected) of three different I/O interfaces: ",(0,r.kt)("inlineCode",{parentName:"p"},"SAT A"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"SAT B"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"SAT C"),' and have "Reset" buttons that could, for example, trigger a\nTelecommand:'),(0,r.kt)(o.Ee,{src:"img/client/my-first-widget/04.png",center:!0,mdxType:"Image"}),(0,r.kt)("p",null,"In this tutorial, you won't connect this to any actual data source (the event\nbus) that's a part of the following tutorial."),(0,r.kt)("p",null,"The code you'll write looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title='src/widgets/my-new-widget/widget.tsx'",title:"'src/widgets/my-new-widget/widget.tsx'"},'import {\n    Divider,\n    Flex,\n    Heading,\n    StatusLight,\n    View,\n    ActionButton\n} from \'@adobe/react-spectrum\';\n\nexport function Widget() {\n    return (\n        <View padding={\'size-200\'} height={\'100%\'}>\n            <Flex direction="column" width="100%">\n                <Heading level={3}>Connection Status</Heading>\n                <Divider size="M" marginBottom={\'size-200\'} />\n                <Indicator system="SAT A" />\n                <Indicator system="SAT B" />\n                <Indicator system="SAT C" />\n            </Flex>\n        </View>\n    );\n}\n\nfunction Indicator(props: { system: string }) {\n    return (\n        <Flex alignItems={\'baseline\'} gap={\'size-200\'}>\n            <StatusLight variant="positive">{props.system} Connected</StatusLight>\n            <ActionButton>Reset</ActionButton>\n        </Flex>\n    );\n}\n')),(0,r.kt)("h2",{id:"step-1-build-the-layout"},"Step 1: Build the layout"),(0,r.kt)("p",null,"Adjust the ",(0,r.kt)("inlineCode",{parentName:"p"},"widget.tsx")," to have a base layout for your widget's UI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title='src/widgets/my-new-widget/widget.tsx'",title:"'src/widgets/my-new-widget/widget.tsx'"},"// highlight-start\nimport { Divider, Flex, Heading, View } from '@adobe/react-spectrum';\n// highlight-end\n\nexport function Widget() {\n    // highlight-start\n    return (\n        <View padding={'size-200'} height={'100%'}>\n            <Flex direction=\"column\" width=\"100%\">\n                <Heading level={3}>Connection Status</Heading>\n                <Divider size=\"M\" marginBottom={'size-200'} />\n                {/* Content goes here */}\n            </Flex>\n        </View>\n    );\n    // highlight-end\n}\n")),(0,r.kt)("p",null,"The result should look something like this:"),(0,r.kt)(o.Ee,{src:"img/client/my-first-widget/03.png",center:!0,mdxType:"Image"}),(0,r.kt)("h2",{id:"step-2-add-component-for-a-systems-indicator"},"Step 2: Add component for a system's indicator"),(0,r.kt)("p",null,"Since you have three different systems, you'll extract their connection status\nUI into one reusable ",(0,r.kt)("inlineCode",{parentName:"p"},"<Indicator />")," component and use it for your three\ndifferent systems:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title='src/widgets/my-new-widget/widget.tsx'",title:"'src/widgets/my-new-widget/widget.tsx'"},'import {\n    Divider,\n    Flex,\n    Heading,\n    // highlight-next-line\n    StatusLight,\n    View,\n    // highlight-next-line\n    ActionButton\n} from \'@adobe/react-spectrum\';\n\nexport function Widget() {\n    return (\n        <View padding={\'size-200\'} height={\'100%\'}>\n            <Flex direction="column" width="100%">\n                <Heading level={3}>Connection Status</Heading>\n                <Divider size="M" marginBottom={\'size-200\'} />\n                // highlight-start\n                <Indicator system="SAT A" />\n                <Indicator system="SAT B" />\n                <Indicator system="SAT C" />\n                // highlight-end\n            </Flex>\n        </View>\n    );\n}\n\n// highlight-start\nfunction Indicator(props: { system: string }) {\n    return (\n        <Flex alignItems={\'baseline\'} gap={\'size-200\'}>\n            <StatusLight variant="positive">{props.system} Connected</StatusLight>\n            <ActionButton>Reset</ActionButton>\n        </Flex>\n    );\n}\n// highlight-end\n')),(0,r.kt)("p",null,"Now, your UI has status-light indicators for the connection status of the three\ndifferent systems and reset buttons:"),(0,r.kt)(o.Ee,{src:"img/client/my-first-widget/04.png",center:!0,mdxType:"Image"}),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"You have now developed a realistic widget using the Spectrum Design system."),(0,r.kt)("p",null,"You should familiarize yourself with both the Spectrum Design system in general\nas well as the React Spectrum implementation using Adobe's resources:"),(0,r.kt)(o.s3,{to:"https://spectrum.adobe.com/",mdxType:"Reference"},"Adobe Spectrum Design System"),(0,r.kt)(o.s3,{to:"https://react-spectrum.adobe.com/react-spectrum/index.html",mdxType:"Reference"},"React Spectrum Documentation"),(0,r.kt)("p",null,"Of course, this widget, right now, doesn't reflect the actual connection status.\nTo change that, you'll learn how to connect this widget to the Application's\nevent bus using the APIs from ",(0,r.kt)("inlineCode",{parentName:"p"},"@wuespace/telestion-client-core")," in the next\ntutorial:"),(0,r.kt)(o.s3,{to:"../connecting-with-event-bus",mdxType:"Reference"},"Connecting the widget with the Event Bus"))}p.isMDXComponent=!0}}]);