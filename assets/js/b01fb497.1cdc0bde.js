"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[7089],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||s;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4966:(e,t,n)=>{n.d(t,{kN:()=>l,rj:()=>r,Ee:()=>d,s3:()=>o});var a=n(7294);function r(e){let{cols:t=2,children:n}=e;return a.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var s=n(9960);function o(e){let{children:t,to:n}=e;return a.createElement(s.Z,{to:n,className:"block-link"},a.createElement("span",null,t," \xbb"),a.createElement("span",null,n))}const i=()=>a.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},a.createElement("defs",null,a.createElement("style",null,".a{clip-path:url(#b);}"),a.createElement("clipPath",{id:"b"},a.createElement("rect",{width:24,height:24}))),a.createElement("g",{id:"a",className:"a"},a.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function l(e){let{children:t,file:n}=e;return a.createElement("a",{className:"block-link",download:!0,href:n},a.createElement("span",null,a.createElement(i,null)," ",t))}var c=n(7462),p=n(4996),m=n(6010);function d(e){let{src:t,invertible:n=!1,center:r=!1,alt:o="",...i}=e;const l=t.startsWith("/static")?t.substr(7):t,d=(0,p.Z)(l);return a.createElement(a.Fragment,null,a.createElement(s.Z,{to:l,style:{display:"none"}},"Link to ",o),a.createElement("img",(0,c.Z)({src:d,className:(0,m.Z)(n&&"invertible",r&&"center"),alt:o},i)))}},3613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),s=n(4966);const o={title:"Event Bus",description:'The "nervous system" of the Telestion ecosystem through which all components communicate'},i=void 0,l={unversionedId:"common-concepts/event-bus",id:"common-concepts/event-bus",title:"Event Bus",description:'The "nervous system" of the Telestion ecosystem through which all components communicate',source:"@site/docs/common-concepts/event-bus.mdx",sourceDirName:"common-concepts",slug:"/common-concepts/event-bus",permalink:"/common-concepts/event-bus",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/common-concepts/event-bus.mdx",tags:[],version:"current",frontMatter:{title:"Event Bus",description:'The "nervous system" of the Telestion ecosystem through which all components communicate'},sidebar:"docs",previous:{title:"Client",permalink:"/common-concepts/client"}},c={},p=[{value:"Video version",id:"video-version",level:2},{value:"Messages",id:"messages",level:2},{value:"Channels and Addresses",id:"channels-and-addresses",level:2},{value:"Data Pipeline",id:"data-pipeline",level:2},{value:"Requests",id:"requests",level:2},{value:"Event Bus Bridge",id:"event-bus-bridge",level:2},{value:"Setting up the Event Bus Bridge in the Application",id:"setting-up-the-event-bus-bridge-in-the-application",level:3},{value:"See also",id:"see-also",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Event Bus is, basically, the nervous system of the Telestion Ecosystem. The\necosystem uses the Event Bus for the communication between its various\ncomponents."),(0,r.kt)("h2",{id:"video-version"},"Video version"),(0,r.kt)("p",null,"You can find a video version of this concept's explanation here:"),(0,r.kt)(s.s3,{to:"https://www.youtube.com/watch?v=X92A77OdEg0",mdxType:"Reference"},"Event Bus | Telestion Concepts (Video)"),(0,r.kt)("h2",{id:"messages"},"Messages"),(0,r.kt)("p",null,"At the core of the Event Bus, there are so-called ",(0,r.kt)("em",{parentName:"p"},"Messages"),". Messages are data\npackets that you can send to a specific channel. Then, all components monitoring\nthat channel receive you message."),(0,r.kt)("h2",{id:"channels-and-addresses"},"Channels and Addresses"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"Channel")," is defined by its ",(0,r.kt)("em",{parentName:"p"},"Address")," (or ",(0,r.kt)("em",{parentName:"p"},"Channel Address"),"), which is a\nstring (text) and essentially serves as the channel's name."),(0,r.kt)(s.Ee,{invertible:!0,src:"/static/img/drawio-diagrams/vertx/eventbus.drawio.svg",center:!0,mdxType:"Image"}),(0,r.kt)("p",null,"The address typically describes the channel's content (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"raw-telemetry"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"telecommand-out"),", etc.)."),(0,r.kt)("admonition",{title:"Mental model",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"As a mental model, you can compare the event bus to radio communication, e.g.,\nin Air Traffic Control:"),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Concept in Radio Communication"),(0,r.kt)("th",{parentName:"tr",align:null},"Corresponding concept in the Event Bus"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Radio Transmission"),(0,r.kt)("td",{parentName:"tr",align:null},"Message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Frequency"),(0,r.kt)("td",{parentName:"tr",align:null},"Address"))))),(0,r.kt)("h2",{id:"data-pipeline"},"Data Pipeline"),(0,r.kt)("p",null,"Through the combination of more than one component\n(",(0,r.kt)("a",{parentName:"p",href:"/application/concepts/verticle/"},"Verticles")," on the ",(0,r.kt)("em",{parentName:"p"},"Application")," side) sending\neach other messages and performing small, atomic tasks, you can create a sort of\ndata pipeline that's both easier to think about (as individual components only\nneed to perform smaller tasks) and more adjustable (since you can just plug\ncomponents together in different ways):"),(0,r.kt)(s.Ee,{invertible:!0,src:"/static/img/drawio-diagrams/vertx/data-pipeline.drawio.svg",center:!0,mdxType:"Image"}),(0,r.kt)("h2",{id:"requests"},"Requests"),(0,r.kt)("p",null,"The event bus also allows for so-called ",(0,r.kt)("em",{parentName:"p"},"Requests"),"."),(0,r.kt)("p",null,"This enables ",(0,r.kt)("em",{parentName:"p"},"Request Messages")," which another component can then respond to.\nThis is most useful when dealing with data that you don't need constantly, but\nonly on specific occasions:"),(0,r.kt)(s.Ee,{invertible:!0,src:"/static/img/drawio-diagrams/vertx/requests.drawio.svg",center:!0,mdxType:"Image"}),(0,r.kt)("p",null,"In more technical terms: ",(0,r.kt)("em",{parentName:"p"},"Requests")," enable a polling-based system. This works by\nproviding a dedicated (auto-generated) response address in the requesting\nmessage and then listening for a response on that channel."),(0,r.kt)("admonition",{title:"Request Handling",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In contrast to the system described in the previous sections (publish/subscribe,\nmeaning every component monitoring a channel gets notified about every message),\nrequests are point-to-point based. This means that of all handlers registered\nfor the request's address, only one of them (determined by a round-robin\nalgorithm) gets used.")),(0,r.kt)("h2",{id:"event-bus-bridge"},"Event Bus Bridge"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"Event Bus Bridge")," enables communication between the\n",(0,r.kt)("a",{parentName:"p",href:"/common-concepts/application/"},"Application")," and\n",(0,r.kt)("a",{parentName:"p",href:"/common-concepts/client/"},"Client")," without the need for an extra API."),(0,r.kt)(s.Ee,{invertible:!0,src:"/static/img/drawio-diagrams/vertx/eventbus-bridge.drawio.svg",center:!0,mdxType:"Image"}),(0,r.kt)("p",null,"It achieves this by sharing the event bus (or at least the parts of it that you\nconfigure) via a web socket, meaning the Client can interact with the event bus\nas if it were a part of the Application itself."),(0,r.kt)("h3",{id:"setting-up-the-event-bus-bridge-in-the-application"},"Setting up the Event Bus Bridge in the Application"),(0,r.kt)("p",null,"Thankfully, the Vert.x framework already provides an implementation of the\nBridge, meaning all you need to do to enable it in your Application is to add\nthe corresponding Verticle to your configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title='conf/config.json'",title:"'conf/config.json'"},'{\n    "name": "Eventbus Tcp Bridge",\n    "verticle": "de.wuespace.telestion.services.connection.EventbusTcpBridge",\n    "magnitude": 1,\n    "config": {\n        "host": "0.0.0.0",\n        "port": 9870,\n        "inboundPermitted": ["request-time"],\n        "outboundPermitted": ["parsed-tm"]\n    }\n}\n')),(0,r.kt)("p",null,"With that configuration, every client connecting to the Bridge on port ",(0,r.kt)("inlineCode",{parentName:"p"},"9870"),"\ncould now send messages to ",(0,r.kt)("inlineCode",{parentName:"p"},"request-time")," (and receive responses to request\nmessages) and receive any message published to ",(0,r.kt)("inlineCode",{parentName:"p"},"parsed-tm"),"."),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)(s.s3,{to:"https://vertx.io/docs/vertx-core/java/#event_bus",mdxType:"Reference"},"Vert.x Event Bus Documentation"),(0,r.kt)(s.s3,{to:"https://vertx.io/docs/vertx-tcp-eventbus-bridge/java/",mdxType:"Reference"},"Vert.x TCP Event Bus Bridge Documentation"),(0,r.kt)(s.s3,{to:"https://wuespace.github.io/telestion-client/@wuespace/vertx-event-bus/",mdxType:"Reference"},"Telestion Event Bus Bridge Client API Reference"))}d.isMDXComponent=!0}}]);