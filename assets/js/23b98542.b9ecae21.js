"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[9843],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?i.createElement(g,r(r({ref:t},p),{},{components:n})):i.createElement(g,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5335:(e,t,n)=>{n.d(t,{ZP:()=>r});var i=n(7462),a=(n(7294),n(3905));const o={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Deprecated: Vert.x-based Telestion",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Please note that the application and development of backend services using\nVert.x in Telestion are deprecated. In the future, Telestion backend services\nwill be developed using TypeScript and Deno, or through custom integrations with\nother languages."),(0,a.kt)("p",{parentName:"admonition"},"While there may be a compatibility layer for Vert.x services in the future, its\navailability is not guaranteed."),(0,a.kt)("p",{parentName:"admonition"},"For developing backend services, please refer to the (Work-in-Progress)\ndocumentation available here:\n",(0,a.kt)("a",{parentName:"p",href:"https://pklaschka.github.io/telestion-docs-new/"},"https://pklaschka.github.io/telestion-docs-new/"),".\nOnce the documentation is complete, it will be moved to the main Telestion\ndocumentation."),(0,a.kt)("p",{parentName:"admonition"},"Additional Information:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"NATS will be used as the distributed message bus/message broker for Telestion."),(0,a.kt)("li",{parentName:"ul"},"NATS' integrated authentication and authorization features will handle\nauthentication and authorization for Ground Station operators, providing a\nsingle source of truth."),(0,a.kt)("li",{parentName:"ul"},"The event bus bridge will no longer be featured, and clients will be directly\nconnected to the NATS server.")),(0,a.kt)("p",{parentName:"admonition"},"To establish a more technology-independent terminology, the Telestion project\nwill modify the naming conventions as follows:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"The NATS server will be referred to as the message broker, message bus, or\nNATS server interchangeably."),(0,a.kt)("li",{parentName:"ul"},"Components that act as services without an attached user interface, will be\nreferred to as services or backend services collectively."),(0,a.kt)("li",{parentName:"ul"},'Components that provide a user interface, formerly known as "clients," will be\nreferred to as frontends. In most cases, the frontend will authenticate to the\nmessage broker as the user, while backend services will act on their own\nbehalf.')),(0,a.kt)("p",{parentName:"admonition"},'These changes aim to provide clearer and more consistent terminology, accounting\nfor the possibility of components having both service and frontend\nfunctionalities. Additionally, the use of "client" for frontends will be\nreplaced to avoid potential confusion.'),(0,a.kt)("p",{parentName:"admonition"},"We recommend using the NATS client libraries recommended by NATS itself, unless\nthere are no suitable options available for the targeted language/environment.\nWe will not develop our own client libraries unless there is a lack of suitable\noptions or significant advantages justify the effort."),(0,a.kt)("p",{parentName:"admonition"},"While Deno/TypeScript is the recommended choice for backend services, its use is\nnot mandatory. Developers will be encouraged to use Deno/TypeScript where\nappropriate, but other options will still be supported for specific services.\nComprehensive documentation and resources will be provided for writing and\ndeploying Deno-based backend services in TypeScript."),(0,a.kt)("p",{parentName:"admonition"},"Please consider these changes and updates as you continue with Telestion\ndevelopment.")))}r.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>l,rj:()=>a,Ee:()=>d,s3:()=>r});var i=n(7294);function a(e){let{cols:t=2,children:n}=e;return i.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var o=n(9960);function r(e){let{children:t,to:n}=e;return i.createElement(o.Z,{to:n,className:"block-link"},i.createElement("span",null,t," \xbb"),i.createElement("span",null,n))}const s=()=>i.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},i.createElement("defs",null,i.createElement("style",null,".a{clip-path:url(#b);}"),i.createElement("clipPath",{id:"b"},i.createElement("rect",{width:24,height:24}))),i.createElement("g",{id:"a",className:"a"},i.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function l(e){let{children:t,file:n}=e;return i.createElement("a",{className:"block-link",download:!0,href:n},i.createElement("span",null,i.createElement(s,null)," ",t))}var c=n(7462),p=n(4996),u=n(6010);function d(e){let{src:t,invertible:n=!1,center:a=!1,alt:r="",...s}=e;const l=t.startsWith("/static")?t.substr(7):t,d=(0,p.Z)(l);return i.createElement(i.Fragment,null,i.createElement(o.Z,{to:l,style:{display:"none"}},"Link to ",r),i.createElement("img",(0,c.Z)({src:d,className:(0,u.Z)(n&&"invertible",a&&"center"),alt:r},s)))}n(5335)},4124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(7462),a=(n(7294),n(3905)),o=n(4966);const r={title:"Adding configuration options",description:"Verticles work best when you can adjust their parameters and re-use them. Learn how to make your Verticles configurable."},s=void 0,l={unversionedId:"application/tutorials/adding-configuration-options",id:"application/tutorials/adding-configuration-options",title:"Adding configuration options",description:"Verticles work best when you can adjust their parameters and re-use them. Learn how to make your Verticles configurable.",source:"@site/docs/application/tutorials/202-adding-configuration-options.mdx",sourceDirName:"application/tutorials",slug:"/application/tutorials/adding-configuration-options",permalink:"/application/tutorials/adding-configuration-options",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/application/tutorials/202-adding-configuration-options.mdx",tags:[],version:"current",sidebarPosition:202,frontMatter:{title:"Adding configuration options",description:"Verticles work best when you can adjust their parameters and re-use them. Learn how to make your Verticles configurable."},sidebar:"application",previous:{title:"Using JsonMessage for event bus messages",permalink:"/application/tutorials/using-jsonmessage"},next:{title:"Using traits in Verticles",permalink:"/application/tutorials/using-traits-in-verticles"}},c={},p=[{value:"What you&#39;ll build",id:"what-youll-build",level:2},{value:"Step 1: Defining the <code>record Configuration</code> for the Verticle",id:"step-1-defining-the-record-configuration-for-the-verticle",level:2},{value:"Step 2: Adjusting the Verticle structure",id:"step-2-adjusting-the-verticle-structure",level:2},{value:"Step 3: Retrieving configuration values",id:"step-3-retrieving-configuration-values",level:2},{value:"Step 4: Adding default configuration parameters",id:"step-4-adding-default-configuration-parameters",level:2},{value:"Step 5: Adjusting the <code>main()</code> method",id:"step-5-adjusting-the-main-method",level:2},{value:"Next steps",id:"next-steps",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"While it's already great to have a Verticle that does its job, the effort of\nmaking it configurable, and thus, reusable, is minimal."),(0,a.kt)("p",null,"Developing your Verticle in a re-usable way means that it'll take far less time\n(and maybe not even re-compilation/a new release) to adjust to changed mission\nparameters."),(0,a.kt)("admonition",{title:"Prerequisites",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"To complete this tutorial, you should be familiar with writing basic Verticles\nand using the ",(0,a.kt)("inlineCode",{parentName:"p"},"JsonMessage")," interface from the Telestion APIs.")),(0,a.kt)("h2",{id:"what-youll-build"},"What you'll build"),(0,a.kt)(o.s3,{to:"/application/tutorials/using-jsonmessage/",mdxType:"Reference"},"Base Code"),(0,a.kt)("p",null,"Based on the code from the\n",(0,a.kt)("a",{parentName:"p",href:"/application/tutorials/using-jsonmessage/"},(0,a.kt)("inlineCode",{parentName:"a"},"JsonMessage")," tutorial"),", you'll make\nyour ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageTransformer")," Verticle configurable."),(0,a.kt)("p",null,"After the tutorial, your Verticle looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {3-4,5,7-9,11,18,20-23,28-36,42,45,46}",title:"'MessageTransformer.java'","{3-4,5,7-9,11,18,20-23,28-36,42,45,46}":!0},'package de.wuespace.telestion.project.example;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport de.wuespace.telestion.api.message.JsonMessage;\nimport de.wuespace.telestion.api.verticle.TelestionConfiguration;\nimport de.wuespace.telestion.api.verticle.TelestionVerticle;\nimport io.vertx.core.DeploymentOptions;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.json.JsonObject;\n\npublic class MessageTransformer extends TelestionVerticle<MessageTransformer.Configuration> {\n\n    public static void main(String[] args) throws InterruptedException {\n        var vertx = Vertx.vertx();\n\n        // [...]\n\n        var config = new JsonObject().put("multiplier", 6);\n\n        vertx.deployVerticle(\n            new MessageTransformer(),\n            new DeploymentOptions().setConfig(config)\n        ).onSuccess(res -> {\n            // [...]\n        });\n    }\n\n    public record Configuration(\n            @JsonProperty String inAddress,\n            @JsonProperty String outAddress,\n            @JsonProperty int multiplier\n    ) implements TelestionConfiguration {\n        public Configuration() {\n            this("input", "output", 2); // default values\n        }\n    }\n\n    @Override\n    public void onStart() {\n        var eb = getVertx().eventBus();\n\n        eb.consumer(getConfig().inAddress(), event -> {\n            JsonMessage.on(IntegerMessage.class, event, message -> {\n                int received = message.value();\n                var output = new IntegerMessage(received * getConfig().multiplier());\n                eb.publish(getConfig().outAddress(), output.json());\n            });\n        });\n    }\n}\n')),(0,a.kt)("h2",{id:"step-1-defining-the-record-configuration-for-the-verticle"},"Step 1: Defining the ",(0,a.kt)("inlineCode",{parentName:"h2"},"record Configuration")," for the Verticle"),(0,a.kt)("p",null,"The Telestion APIs re-use the ",(0,a.kt)("inlineCode",{parentName:"p"},"JsonMessage")," interface to deal with type safety\nin configuration options. The reason for this is basically the same as with the\nevent bus: Vert.x natively uses ",(0,a.kt)("inlineCode",{parentName:"p"},"JsonObject")," instances. While in specific,\ndynamic use-cases, this is useful, you typically want your configuration to be\ntype safe, which is why you can use convenience functions that are like the\n",(0,a.kt)("inlineCode",{parentName:"p"},"JsonMessage")," APIs."),(0,a.kt)("p",null,"Since this Verticle is rather basic, there are only three parameters that you\ncould expose to be configurable:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"the event bus address you're listening to"),(0,a.kt)("li",{parentName:"ol"},"the event bus address you're publishing to"),(0,a.kt)("li",{parentName:"ol"},"the multiplier")),(0,a.kt)("p",null,"Add a ",(0,a.kt)("inlineCode",{parentName:"p"},"record Configuration implements TelestionConfiguration")," containing these\nfields as a member of your ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageTransformer")," Verticle:"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"It has become a convention to make the configuration records members of their\nVerticle and name them ",(0,a.kt)("inlineCode",{parentName:"p"},"Configuration"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MessageTransformer.java" {11-16}',title:'"MessageTransformer.java"',"{11-16}":!0},"package de.wuespace.telestion.project.example;\n\n// [...]\n\npublic class MessageTransformer extends TelestionVerticle<MessageTransformer.Configuration> {\n\n    public static void main(String[] args) throws InterruptedException {\n        // [...]\n    }\n\n    public record Configuration(\n            @JsonProperty String inAddress,\n            @JsonProperty String outAddress,\n            @JsonProperty int multiplier\n    ) implements TelestionConfiguration {\n    }\n\n    @Override\n    public void onStart() {\n        // [...]\n    }\n}\n")),(0,a.kt)("p",null,"Now that you have defined a configuration record, you can take a look at how you\ncan apply it in your Verticle."),(0,a.kt)("h2",{id:"step-2-adjusting-the-verticle-structure"},"Step 2: Adjusting the Verticle structure"),(0,a.kt)("p",null,"To actually use your configuration, you need to make some slight adjustments to\nthe existing code."),(0,a.kt)("p",null,"Now, the generic type enters the game. You need to give the ",(0,a.kt)("inlineCode",{parentName:"p"},"TelestionVerticle"),"\nclass a hint about your new configuration. Replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"NoConfiguration")," type\nwith your configuration type ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageTransformer.Configuration"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {5}",title:"'MessageTransformer.java'","{5}":!0},"package de.wuespace.telestion.project.example;\n\n// [...]\n\npublic class MessageTransformer extends TelestionVerticle<MessageTransformer.Configuration> {\n    // [...]\n}\n")),(0,a.kt)("p",null,"With that, your Verticle is fully set up to handle configuration objects."),(0,a.kt)("h2",{id:"step-3-retrieving-configuration-values"},"Step 3: Retrieving configuration values"),(0,a.kt)("p",null,"When the Verticle starts, it automatically retrieves and merges the\nconfiguration provided by the ",(0,a.kt)("inlineCode",{parentName:"p"},"Vertx")," context with the default configuration."),(0,a.kt)("p",null,"Then it maps the merged configuration back to your ",(0,a.kt)("inlineCode",{parentName:"p"},"Configuration")," type."),(0,a.kt)("p",null,"To access the configuration, use one of the ",(0,a.kt)("inlineCode",{parentName:"p"},"TelestionVerticle"),"'s convenience\nmethods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {}",title:"'MessageTransformer.java'","{}":!0},"package de.wuespace.telestion.project.example;\n\n// [...]\nimport de.wuespace.telestion.api.config.Config;\n// [...]\n\npublic class MessageTransformer extends TelestionVerticle<MessageTransformer.Configuration> {\n    // [...]\n\n    @Override\n    public void onStart() {\n        var eb = getVertx().eventBus();\n\n        eb.consumer(getConfig().inAddress(), event -> {\n            JsonMessage.on(IntegerMessage.class, event, message -> {\n                int received = message.value();\n                var output = new IntegerMessage(received * getConfig().multiplier());\n                eb.publish(getConfig().outAddress(), output.json());\n            });\n        });\n    }\n\n    // [...]\n}\n")),(0,a.kt)("p",null,"You can now just access configuration options by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"getConfig")," method\nprovided by the ",(0,a.kt)("inlineCode",{parentName:"p"},"TelestionVerticle")," base class."),(0,a.kt)("p",null,"To access the configuration in other types, take a look at the API reference of\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"TelestionVerticle"),":"),(0,a.kt)(o.s3,{to:"https://javadoc.io/doc/de.wuespace.telestion/telestion-api/latest/de/wuespace/telestion/api/verticle/TelestionVerticle.html",mdxType:"Reference"},(0,a.kt)("code",null,"TelestionVerticle")," API reference"),(0,a.kt)("h2",{id:"step-4-adding-default-configuration-parameters"},"Step 4: Adding default configuration parameters"),(0,a.kt)("p",null,"Having every single configuration option for every single Verticle you deploy\ncan be quite cumbersome."),(0,a.kt)("p",null,"It's good practice to define the default values for your ",(0,a.kt)("inlineCode",{parentName:"p"},"Configuration")," record."),(0,a.kt)("p",null,"Add a default constructor with no arguments defining the default values to your\n",(0,a.kt)("inlineCode",{parentName:"p"},"Configuration")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MessageTransformer.java" {14-16}',title:'"MessageTransformer.java"',"{14-16}":!0},'package de.wuespace.telestion.project.example;\n\n// [...]\n\npublic class MessageTransformer extends TelestionVerticle<MessageTransformer.Configuration> {\n\n    // [...]\n\n    public record Configuration(\n            @JsonProperty String inAddress,\n            @JsonProperty String outAddress,\n            @JsonProperty int multiplier\n    ) implements TelestionConfiguration {\n        public Configuration() {\n            this("input", "output", 2); // default values\n        }\n    }\n\n    // [...]\n}\n')),(0,a.kt)("p",null,"That's it. The ",(0,a.kt)("inlineCode",{parentName:"p"},"TelestionVerticle")," class tries to load the default configuration\nonce the Verticle starts."),(0,a.kt)("h2",{id:"step-5-adjusting-the-main-method"},"Step 5: Adjusting the ",(0,a.kt)("inlineCode",{parentName:"h2"},"main()")," method"),(0,a.kt)("p",null,"To test what you've just written, you also need to adjust your ",(0,a.kt)("inlineCode",{parentName:"p"},"main()")," method."),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"new DeploymentOptions().setConfig(jsonObject)")," to pass a configuration\nobject to the deployed Verticle:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:"title='MessageTransformer.java' {14,16-19}",title:"'MessageTransformer.java'","{14,16-19}":!0},'package de.wuespace.telestion.project.example;\n\n// [...]\nimport io.vertx.core.DeploymentOptions;\nimport io.vertx.core.json.JsonObject;\n\npublic class MessageTransformer extends TelestionVerticle<MessageTransformer.Configuration> {\n\n    public static void main(String[] args) throws InterruptedException {\n        var vertx = Vertx.vertx();\n\n        // [...]\n\n        var config = new JsonObject().put("multiplier", 6);\n\n        vertx.deployVerticle(\n            new MessageTransformer(),\n            new DeploymentOptions().setConfig(config)\n        ).onSuccess(res -> {\n            // [...]\n        });\n    }\n\n    // [...]\n}\n')),(0,a.kt)("p",null,"That's it. When you now re-run the main method, you now get a ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"18"),",\nthat is, ",(0,a.kt)("inlineCode",{parentName:"p"},"6 * 3"),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You're using ",(0,a.kt)("inlineCode",{parentName:"p"},"new JsonObject().put()")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"new Configuration()"),' since it\nwouldn\'t be possible to test your default values if you instantiated a "full"\n',(0,a.kt)("inlineCode",{parentName:"p"},"Configuration")," instance.")),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("p",null,"And that's already it. While you may, of course, need to know how to use other\nJava functionalities, this is all the Telestion-specific knowledge you need to\nwrite Verticles and even whole extensions for the Telestion projects."),(0,a.kt)(o.s3,{to:"https://javadoc.io/doc/de.wuespace.telestion/telestion-api/latest/de/wuespace/telestion/api/verticle/TelestionVerticle.html",mdxType:"Reference"},(0,a.kt)("code",null,"TelestionVerticle")," API reference"))}d.isMDXComponent=!0}}]);