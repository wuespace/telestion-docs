"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[8382],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=a,h=m["".concat(s,".").concat(p)]||m[p]||u[p]||i;return n?o.createElement(h,r(r({ref:t},d),{},{components:n})):o.createElement(h,r({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5335:(e,t,n)=>{n.d(t,{ZP:()=>r});var o=n(7462),a=(n(7294),n(3905));const i={toc:[]};function r(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Deprecated: Vert.x-based Telestion",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Please note that the application and development of backend services using\nVert.x in Telestion are deprecated. In the future, Telestion backend services\nwill be developed using TypeScript and Deno, or through custom integrations with\nother languages."),(0,a.kt)("p",{parentName:"admonition"},"While there may be a compatibility layer for Vert.x services in the future, its\navailability is not guaranteed."),(0,a.kt)("p",{parentName:"admonition"},"For developing backend services, please refer to the (Work-in-Progress)\ndocumentation available here:\n",(0,a.kt)("a",{parentName:"p",href:"https://pklaschka.github.io/telestion-docs-new/"},"https://pklaschka.github.io/telestion-docs-new/"),".\nOnce the documentation is complete, it will be moved to the main Telestion\ndocumentation."),(0,a.kt)("p",{parentName:"admonition"},"Additional Information:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"NATS will be used as the distributed message bus/message broker for Telestion."),(0,a.kt)("li",{parentName:"ul"},"NATS' integrated authentication and authorization features will handle\nauthentication and authorization for Ground Station operators, providing a\nsingle source of truth."),(0,a.kt)("li",{parentName:"ul"},"The event bus bridge will no longer be featured, and clients will be directly\nconnected to the NATS server.")),(0,a.kt)("p",{parentName:"admonition"},"To establish a more technology-independent terminology, the Telestion project\nwill modify the naming conventions as follows:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"The NATS server will be referred to as the message broker, message bus, or\nNATS server interchangeably."),(0,a.kt)("li",{parentName:"ul"},"Components that act as services without an attached user interface, will be\nreferred to as services or backend services collectively."),(0,a.kt)("li",{parentName:"ul"},'Components that provide a user interface, formerly known as "clients," will be\nreferred to as frontends. In most cases, the frontend will authenticate to the\nmessage broker as the user, while backend services will act on their own\nbehalf.')),(0,a.kt)("p",{parentName:"admonition"},'These changes aim to provide clearer and more consistent terminology, accounting\nfor the possibility of components having both service and frontend\nfunctionalities. Additionally, the use of "client" for frontends will be\nreplaced to avoid potential confusion.'),(0,a.kt)("p",{parentName:"admonition"},"We recommend using the NATS client libraries recommended by NATS itself, unless\nthere are no suitable options available for the targeted language/environment.\nWe will not develop our own client libraries unless there is a lack of suitable\noptions or significant advantages justify the effort."),(0,a.kt)("p",{parentName:"admonition"},"While Deno/TypeScript is the recommended choice for backend services, its use is\nnot mandatory. Developers will be encouraged to use Deno/TypeScript where\nappropriate, but other options will still be supported for specific services.\nComprehensive documentation and resources will be provided for writing and\ndeploying Deno-based backend services in TypeScript."),(0,a.kt)("p",{parentName:"admonition"},"Please consider these changes and updates as you continue with Telestion\ndevelopment.")))}r.isMDXComponent=!0},4966:(e,t,n)=>{n.d(t,{kN:()=>s,rj:()=>a,Ee:()=>m,s3:()=>r});var o=n(7294);function a(e){let{cols:t=2,children:n}=e;return o.createElement("div",{style:{display:"grid",gridTemplateColumns:`repeat(${t}, 1fr)`,columnGap:"1em"}},n)}var i=n(9960);function r(e){let{children:t,to:n}=e;return o.createElement(i.Z,{to:n,className:"block-link"},o.createElement("span",null,t," \xbb"),o.createElement("span",null,n))}const l=()=>o.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},o.createElement("defs",null,o.createElement("style",null,".a{clip-path:url(#b);}"),o.createElement("clipPath",{id:"b"},o.createElement("rect",{width:24,height:24}))),o.createElement("g",{id:"a",className:"a"},o.createElement("path",{d:"M4,20a4,4,0,0,1-4-4V12a2,2,0,0,1,2-2v6a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V10a2,2,0,0,1,2,2v4a4,4,0,0,1-4,4Zm5.389-6.208-.02-.015h0l-.02-.016c-.02-.016-.038-.034-.057-.052L3.636,8.05A1,1,0,1,1,5.05,6.636L9,10.587V1a1,1,0,0,1,2,0v9.586l3.949-3.95A1,1,0,0,1,16.364,8.05l-5.639,5.638a1,1,0,0,1-1.336.1Z",transform:"translate(2 2)"})));function s(e){let{children:t,file:n}=e;return o.createElement("a",{className:"block-link",download:!0,href:n},o.createElement("span",null,o.createElement(l,null)," ",t))}var c=n(7462),d=n(4996),u=n(6010);function m(e){let{src:t,invertible:n=!1,center:a=!1,alt:r="",...l}=e;const s=t.startsWith("/static")?t.substr(7):t,m=(0,d.Z)(s);return o.createElement(o.Fragment,null,o.createElement(i.Z,{to:s,style:{display:"none"}},"Link to ",r),o.createElement("img",(0,c.Z)({src:m,className:(0,u.Z)(n&&"invertible",a&&"center"),alt:r},l)))}n(5335)},3051:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(7462),a=(n(7294),n(3905)),i=n(4966);const r={title:"Conventional Commit Types",description:"Find out which conventional commit type you need to use."},l=void 0,s={unversionedId:"internal/references/conventional-commit-types",id:"internal/references/conventional-commit-types",title:"Conventional Commit Types",description:"Find out which conventional commit type you need to use.",source:"@site/docs/internal/references/conventional-commit-types.mdx",sourceDirName:"internal/references",slug:"/internal/references/conventional-commit-types",permalink:"/internal/references/conventional-commit-types",draft:!1,editUrl:"https://github.com/wuespace/telestion-docs/edit/main/docs/internal/references/conventional-commit-types.mdx",tags:[],version:"current",frontMatter:{title:"Conventional Commit Types",description:"Find out which conventional commit type you need to use."},sidebar:"internal",previous:{title:"Branch Naming Guidelines",permalink:"/internal/references/branch-names"},next:{title:"Key Git Principles",permalink:"/internal/references/key-git-principles"}},c={},d=[{value:"Diagram",id:"diagram",level:2},{value:"Table",id:"table",level:2},{value:"See also",id:"see-also",level:2}],u={toc:d};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This document gives you a quick way to determine the correct conventional commit\ntype for your change."),(0,a.kt)("h2",{id:"diagram"},"Diagram"),(0,a.kt)(i.Ee,{src:"/static/img/drawio-diagrams/conventional-commits/conventional-commits-decision-table.drawio.svg",invertible:!0,mdxType:"Image"}),(0,a.kt)("h2",{id:"table"},"Table"),(0,a.kt)("admonition",{title:"More than one commit types",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use the most extensive type (the highest in the table below) if a commit\nincludes more than one commit type. Using the broadest type ensures correct\nversioning. For example, if a feature, as a side-effect, also fixes a bug, it's\nstill a feature. If it closes an issue, please still include\n",(0,a.kt)("inlineCode",{parentName:"p"},"Closes: #issue-number")," in the commit's footer to signify the fix")),(0,a.kt)("admonition",{title:"Breaking Changes",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If a commit has breaking changes, you need to declare it using an exclamation\nmark (",(0,a.kt)("inlineCode",{parentName:"p"},"!"),") before the colon (between the type and the colon (",(0,a.kt)("inlineCode",{parentName:"p"},":"),"), for example,\n",(0,a.kt)("inlineCode",{parentName:"p"},"fix!: Hello world"),", or, if it exists, the scope and the colon, for example,\n",(0,a.kt)("inlineCode",{parentName:"p"},"feat(scope)!: Hello World"),"). With breaking changes, you should include a\n",(0,a.kt)("inlineCode",{parentName:"p"},"BREAKING CHANGE: [description]")," footer describing the breaking change.")),(0,a.kt)("table",{id:"table_fhj_gnv_vnb"},(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("i",null,"Conventional Commit Type")),(0,a.kt)("td",null,"Changelog entry"),(0,a.kt)("td",null,"Smallest Required Version Bump"),(0,a.kt)("td",null,"Description"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"feat")),(0,a.kt)("td",null,(0,a.kt)("q",null,"Features")),(0,a.kt)("td",null,"minor (major if breaking)"),(0,a.kt)("td",null,"Newly implemented features")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"fix")),(0,a.kt)("td",null,(0,a.kt)("q",null,"Bug Fixes")),(0,a.kt)("td",null,"patch (major if breaking)"),(0,a.kt)("td",null,"Bug fixes")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"docs")),(0,a.kt)("td",null,(0,a.kt)("q",null,"Documentation Changes")),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Documentation-only changes.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"chore")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Meta changes that don't change the actual product, but rather the build system, CI configuration, repo structure, etc.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"style")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Changes that only affect the code style (fixed linting issues, etc.)")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"refactor")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Refactorings only causing internal changes not affecting the actual behavior")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"perf")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Performance-only changes, not affecting the actual behavior")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"test")),(0,a.kt)("td",null,"n/a"),(0,a.kt)("td",null,"patch"),(0,a.kt)("td",null,"Added, removed or changed unit, integration or E2E tests. May not include changes to the source code.")))),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)(i.s3,{to:"/internal/concepts/conventional-commits",mdxType:"Reference"},"Conventional Commits Concept"))}m.isMDXComponent=!0}}]);