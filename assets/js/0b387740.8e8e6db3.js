"use strict";(self.webpackChunktelestion_docs=self.webpackChunktelestion_docs||[]).push([[8467],{9676:function(e){e.exports=JSON.parse('{"pluginId":"docs","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Telestion Developer Documentation","href":"/","docId":"index"},{"type":"category","label":"Common Concepts","items":[{"type":"link","label":"Application","href":"/common-concepts/application","docId":"common-concepts/application"},{"type":"link","label":"Client","href":"/common-concepts/client","docId":"common-concepts/client"}],"collapsible":false,"collapsed":false,"href":"/common-concepts"}],"internal":[{"type":"link","label":"Internal Docs","href":"/internal/","docId":"internal/index"},{"type":"category","label":"Concepts","items":[{"type":"link","label":"Conventional Commits","href":"/internal/concepts/conventional-commits","docId":"internal/concepts/conventional-commits"},{"type":"link","label":"Error/Exception Messages (Code)","href":"/internal/concepts/error-messages","docId":"internal/concepts/error-messages"},{"type":"link","label":"lerna","href":"/internal/concepts/lerna","docId":"internal/concepts/lerna"}],"collapsible":true,"collapsed":true,"href":"/internal/concepts"},{"type":"category","label":"Tutorials","items":[],"collapsible":true,"collapsed":true,"href":"/internal/tutorials"},{"type":"category","label":"Guides","items":[],"collapsible":true,"collapsed":true,"href":"/internal/guides"},{"type":"category","label":"References","items":[{"type":"link","label":"Actionable Error Message Structure","href":"/internal/references/actionable-error-message-structure","docId":"internal/references/actionable-error-message-structure"},{"type":"link","label":"Branch Naming Guidelines","href":"/internal/references/branch-names","docId":"internal/references/branch-names"},{"type":"link","label":"Conventional Commit Types","href":"/internal/references/conventional-commit-types","docId":"internal/references/conventional-commit-types"},{"type":"link","label":"Key Git Principles","href":"/internal/references/key-git-principles","docId":"internal/references/key-git-principles"},{"type":"link","label":"Maintainer\'s Tasks","href":"/internal/references/maintainers-tasks","docId":"internal/references/maintainers-tasks"},{"type":"link","label":"Unexpected Error Message Structure","href":"/internal/references/unexpected-error-message-structure","docId":"internal/references/unexpected-error-message-structure"}],"collapsible":true,"collapsed":true,"href":"/internal/references"}],"application":[{"type":"link","label":"Application Development","href":"/application/","docId":"application/index"},{"type":"category","label":"Concepts","items":[{"type":"link","label":"Vert.x","href":"/application/concepts/vertx","docId":"application/concepts/vertx"},{"type":"link","label":"Verticle","href":"/application/concepts/verticle","docId":"application/concepts/verticle"},{"type":"link","label":"Event Bus","href":"/application/concepts/event-bus","docId":"application/concepts/event-bus"},{"type":"link","label":"Traits","href":"/application/concepts/traits","docId":"application/concepts/traits"},{"type":"link","label":"Records","href":"/application/concepts/records","docId":"application/concepts/records"}],"collapsible":true,"collapsed":true,"href":"/application/concepts"},{"type":"category","label":"Tutorials","items":[{"type":"link","label":"Starting a new Project","href":"/application/tutorials/starting-a-new-project","docId":"application/tutorials/starting-a-new-project"},{"type":"link","label":"Writing a Verticle","href":"/application/tutorials/writing-a-verticle","docId":"application/tutorials/writing-a-verticle"},{"type":"link","label":"Using JsonMessage for event bus messages","href":"/application/tutorials/using-jsonmessage","docId":"application/tutorials/using-jsonmessage"},{"type":"link","label":"Adding configuration options","href":"/application/tutorials/adding-configuration-options","docId":"application/tutorials/adding-configuration-options"},{"type":"link","label":"Using traits in Verticles","href":"/application/tutorials/using-traits-in-verticles","docId":"application/tutorials/using-traits-in-verticles"}],"collapsible":true,"collapsed":true,"href":"/application/tutorials"},{"type":"category","label":"Guides","items":[{"type":"link","label":"Writing your own traits","href":"/application/guides/writing-your-own-traits","docId":"application/guides/writing-your-own-traits"}],"collapsible":true,"collapsed":true,"href":"/application/guides"},{"type":"category","label":"References","items":[],"collapsible":true,"collapsed":true,"href":"/application/references"},{"type":"link","label":"API Reference","href":"https://javadoc.io/doc/de.wuespace.telestion/"}],"client":[{"type":"link","label":"Client Development","href":"/client/","docId":"client/index"},{"type":"category","label":"Concepts","items":[{"type":"link","label":"NodeJS","href":"/client/concepts/nodejs","docId":"client/concepts/nodejs"},{"type":"link","label":"npm","href":"/client/concepts/npm","docId":"client/concepts/npm"},{"type":"link","label":"TypeScript","href":"/client/concepts/typescript","docId":"client/concepts/typescript"},{"type":"link","label":"Electron","href":"/client/concepts/electron","docId":"client/concepts/electron"},{"type":"link","label":"telestion-client CLI","href":"/client/concepts/tc-cli","docId":"client/concepts/tc-cli"}],"collapsible":true,"collapsed":true,"href":"/client/concepts"},{"type":"category","label":"Tutorials","items":[{"type":"link","label":"Setting up the development environment","href":"/client/tutorials/dev-env-setup","docId":"client/tutorials/dev-env-setup"},{"type":"link","label":"Creating your first own widget","href":"/client/tutorials/bootstrapping-a-widget","docId":"client/tutorials/bootstrapping-a-widget"},{"type":"link","label":"Building the UI using React Spectrum","href":"/client/tutorials/building-ui-using-react-spectrum","docId":"client/tutorials/building-ui-using-react-spectrum"},{"type":"link","label":"Connecting the widget with the Event Bus","href":"/client/tutorials/connecting-with-event-bus","docId":"client/tutorials/connecting-with-event-bus"},{"type":"link","label":"Adding configuration options","href":"/client/tutorials/adding-configuration-options","docId":"client/tutorials/adding-configuration-options"},{"type":"link","label":"Writing a static dialog","href":"/client/tutorials/writing-a-static-dialog","docId":"client/tutorials/writing-a-static-dialog"},{"type":"link","label":"Writing a stateful dialog","href":"/client/tutorials/writing-a-stateful-dialog","docId":"client/tutorials/writing-a-stateful-dialog"}],"collapsible":true,"collapsed":true,"href":"/client/tutorials"},{"type":"category","label":"Guides","items":[],"collapsible":true,"collapsed":true,"href":"/client/guides"},{"type":"category","label":"References","items":[],"collapsible":true,"collapsed":true,"href":"/client/references"},{"type":"link","label":"API Reference","href":"https://wuespace.github.io/telestion-client/"}]},"docs":{"application/concepts/event-bus":{"id":"application/concepts/event-bus","title":"Event Bus","description":"The event bus is a bus via which all verticles communicate.","sidebar":"application"},"application/concepts/records":{"id":"application/concepts/records","title":"Records","description":"Immutable data classes in Java that are heavily used in the Telestion Ecosystem","sidebar":"application"},"application/concepts/traits":{"id":"application/concepts/traits","title":"Traits","description":"Understand the concept of traits in Java","sidebar":"application"},"application/concepts/verticle":{"id":"application/concepts/verticle","title":"Verticle","description":"The building blocks of the Vert.x framework and Telestion Application","sidebar":"application"},"application/concepts/vertx":{"id":"application/concepts/vertx","title":"Vert.x","description":"Eclipse Vert.x is a reactive, modular Java framework.","sidebar":"application"},"application/guides/writing-your-own-traits":{"id":"application/guides/writing-your-own-traits","title":"Writing your own traits","description":"Traits are a convenient way to remove duplicate code and clean up your codebase. Learn how to write your traits.","sidebar":"application"},"application/index":{"id":"application/index","title":"Application Development","description":"The Application is the backend of the Telestion ecosystem and based on Java","sidebar":"application"},"application/tutorials/adding-configuration-options":{"id":"application/tutorials/adding-configuration-options","title":"Adding configuration options","description":"Verticles work best when you can adjust their parameters and re-use them. Learn how to make your Verticles configurable.","sidebar":"application"},"application/tutorials/starting-a-new-project":{"id":"application/tutorials/starting-a-new-project","title":"Starting a new Project","description":"Start a new Telestion Project with the Telestion Project template","sidebar":"application"},"application/tutorials/using-jsonmessage":{"id":"application/tutorials/using-jsonmessage","title":"Using JsonMessage for event bus messages","description":"Learn how to use Telestion\'s JsonMessage APIs to get type safety in your event bus messages.","sidebar":"application"},"application/tutorials/using-traits-in-verticles":{"id":"application/tutorials/using-traits-in-verticles","title":"Using traits in Verticles","description":"Enrich your coding experience in Verticles by using Verticle traits.","sidebar":"application"},"application/tutorials/writing-a-verticle":{"id":"application/tutorials/writing-a-verticle","title":"Writing a Verticle","description":"Verticles are the backend\'s core of every Telestion Project. Learn how to write a basic Verticle.","sidebar":"application"},"client/concepts/electron":{"id":"client/concepts/electron","title":"Electron","description":"Learn about Electron, the technology that allows the creation of native apps for Telestion Client Projects","sidebar":"client"},"client/concepts/nodejs":{"id":"client/concepts/nodejs","title":"NodeJS","description":"Short overview of NodeJS, a runtime environment for JavaScript.","sidebar":"client"},"client/concepts/npm":{"id":"client/concepts/npm","title":"npm","description":"An overview of the npm package manager","sidebar":"client"},"client/concepts/tc-cli":{"id":"client/concepts/tc-cli","title":"telestion-client CLI","description":"An overview of the telestion-client CLI (tc-cli)","sidebar":"client"},"client/concepts/typescript":{"id":"client/concepts/typescript","title":"TypeScript","description":"The language of choice in the Telestion Client Ecosystem. Adds types to JS","sidebar":"client"},"client/index":{"id":"client/index","title":"Client Development","description":"The Client (also called Web Client) is the frontend of the Telestion","sidebar":"client"},"client/tutorials/adding-configuration-options":{"id":"client/tutorials/adding-configuration-options","title":"Adding configuration options","description":"Make your widget configurable and re-usable by adding configuration options","sidebar":"client"},"client/tutorials/bootstrapping-a-widget":{"id":"client/tutorials/bootstrapping-a-widget","title":"Creating your first own widget","description":"Telestion Client projects need their custom widgets. Thankfully, the Telestion tooling makes it straightforward to generate new widgets. Learn how to bootstrap a new widget and include it in a dashboard.","sidebar":"client"},"client/tutorials/building-ui-using-react-spectrum":{"id":"client/tutorials/building-ui-using-react-spectrum","title":"Building the UI using React Spectrum","description":"The Telestion Client ecosystem uses the Adobe Spectrum Design system for its UI. Learn how to use the React Spectrum implementation to build your widget\'s UI.","sidebar":"client"},"client/tutorials/connecting-with-event-bus":{"id":"client/tutorials/connecting-with-event-bus","title":"Connecting the widget with the Event Bus","description":"Use the APIs provided by the `@wuespace/telestion-client-core` package to integrate your widgets into the Application\'s event bus to visualize actual Telemetry data and send Telecommands.","sidebar":"client"},"client/tutorials/dev-env-setup":{"id":"client/tutorials/dev-env-setup","title":"Setting up the development environment","description":"Start a new telestion-client project with the tc-cli","sidebar":"client"},"client/tutorials/writing-a-stateful-dialog":{"id":"client/tutorials/writing-a-stateful-dialog","title":"Writing a stateful dialog","description":"Dialogs can do much more than just showing static content. Learn how you can create a stateful and complex dialog with the Telestion Client Common package.","sidebar":"client"},"client/tutorials/writing-a-static-dialog":{"id":"client/tutorials/writing-a-static-dialog","title":"Writing a static dialog","description":"Dialogs are an essential part of every UI framework. Learn how you can efficiently write and configure static dialogs with the Telestion Client Common package.","sidebar":"client"},"common-concepts/application":{"id":"common-concepts/application","title":"Application","description":"The Java-based backend for the Telestion Ecosystem","sidebar":"docs"},"common-concepts/client":{"id":"common-concepts/client","title":"Client","description":"The web-based user interface in the Telestion Ecosystem","sidebar":"docs"},"index":{"id":"index","title":"Telestion Developer Documentation","description":"Welcome to the Telestion Documentation pages.","sidebar":"docs"},"internal/concepts/conventional-commits":{"id":"internal/concepts/conventional-commits","title":"Conventional Commits","description":"Conventional commits are a method of writing both machine-parsable and human-readable commit messages in a uniform way.","sidebar":"internal"},"internal/concepts/error-messages":{"id":"internal/concepts/error-messages","title":"Error/Exception Messages (Code)","description":"Error messages are a part of every application and getting them right is crucial for a good developer experience.","sidebar":"internal"},"internal/concepts/lerna":{"id":"internal/concepts/lerna","title":"lerna","description":"A CLI to manage monorepo structures of JS-based projects","sidebar":"internal"},"internal/index":{"id":"internal/index","title":"Internal Docs","description":"These pages document the various workflows of contributing to the Telestion","sidebar":"internal"},"internal/references/actionable-error-message-structure":{"id":"internal/references/actionable-error-message-structure","title":"Actionable Error Message Structure","description":"You should use Actionable Error Messages whenever you expect for an error to occur. Learn how to write them well and improve your library\'s developer experience.","sidebar":"internal"},"internal/references/branch-names":{"id":"internal/references/branch-names","title":"Branch Naming Guidelines","description":"Consistent branch naming conventions make it easy to navigate through branches","sidebar":"internal"},"internal/references/conventional-commit-types":{"id":"internal/references/conventional-commit-types","title":"Conventional Commit Types","description":"Find out which conventional commit type you need to use.","sidebar":"internal"},"internal/references/key-git-principles":{"id":"internal/references/key-git-principles","title":"Key Git Principles","description":"Critical principles for contributing to and maintaining the telestion-client repository","sidebar":"internal"},"internal/references/maintainers-tasks":{"id":"internal/references/maintainers-tasks","title":"Maintainer\'s Tasks","description":"An overview of the tasks maintainers of the Telestion project modules have to fulfill","sidebar":"internal"},"internal/references/unexpected-error-message-structure":{"id":"internal/references/unexpected-error-message-structure","title":"Unexpected Error Message Structure","description":"You should use Unexpected Error Messages whenever you didn\'t expect a developer to hit an error case. While there\'s only so much you can do, it\'s crucial to be as helpful as possible to frustrate the developer even further.","sidebar":"internal"}}}')}}]);